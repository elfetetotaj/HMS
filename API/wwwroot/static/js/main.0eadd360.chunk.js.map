{"version":3,"sources":["app/api/agent.ts","app/models/department.ts","app/models/profile.ts","app/stores/departmentStore.ts","app/stores/receptionistStore.ts","app/stores/nurseStore.ts","app/stores/userStore.ts","app/stores/farmacistStore.ts","app/stores/testStore.ts","app/stores/patientStore.ts","app/stores/cityStore.ts","app/stores/therapyStore.ts","app/stores/profileStore.ts","app/stores/doctorStore.ts","app/stores/techEmployeeStore.ts","app/stores/surgeryStore.ts","app/stores/countryStore.ts","app/stores/terminStore.ts","app/stores/bloodTypeStore.ts","app/stores/emergencyDriverStore.ts","app/stores/roomStore.ts","app/stores/medicineStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","features/profiles/ProfileCard.tsx","features/departments/dashboard/DepartmentListItemAttendee.tsx","features/departments/dashboard/DepartmentListItem.tsx","features/departments/dashboard/DepartmentList.tsx","features/departments/dashboard/DepartmentDashboard.tsx","features/departments/details/DepartmentDetailedChat.tsx","features/departments/details/DepartmentDetailedHeader.tsx","features/departments/details/DepartmentDetailedInfo.tsx","features/departments/details/DepartmentDetailedSidebar.tsx","features/departments/details/DepartmentDetails.tsx","app/common/form/MyTextArea.tsx","features/departments/form/DepartmentForm.tsx","features/receptionists/dashboard/ReceptionistFilters.tsx","features/receptionists/dashboard/ReceptionistListItem.tsx","features/receptionists/dashboard/ReceptionistList.tsx","features/receptionists/dashboard/ReceptionistDashboard.tsx","features/receptionists/details/ReceptionistDetailedChat.tsx","features/receptionists/details/ReceptionistDetailedInfo.tsx","features/receptionists/details/ReceptionistDetailedSidebar.tsx","features/receptionists/details/ReceptionistDetailesHeader.tsx","features/receptionists/details/ReceptionistDetails.tsx","app/common/form/MyDateInput.tsx","features/receptionists/form/ReceptionistForm.tsx","features/nurses/dashboard/NurseFilters.tsx","features/nurses/dashboard/NurseListItem.tsx","features/nurses/dashboard/NurseList.tsx","features/nurses/dashboard/NurseDashboard.tsx","features/nurses/details/NurseDetailedChat.tsx","features/nurses/details/NurseDetailedHeader.tsx","features/nurses/details/NurseDetailedInfo.tsx","features/nurses/details/NurseDetails.tsx","features/nurses/form/NurseForm.tsx","features/farmacist/dashboard/FarmacistFilters.tsx","features/farmacist/dashboard/FarmacistListItem.tsx","features/farmacist/dashboard/FarmacistList.tsx","features/farmacist/dashboard/FarmacistDashboard.tsx","features/farmacist/details/FarmacistDetailedChat.tsx","features/farmacist/details/FarmacistDetailedHeader.tsx","features/farmacist/details/FarmacistDetailedInfo.tsx","features/farmacist/details/FarmacistDetails.tsx","features/farmacist/form/FarmacistForm.tsx","features/patients/dashboard/PatientListItem.tsx","features/patients/dashboard/PatientList.tsx","features/patients/dashboard/PatientFilters.tsx","features/patients/dashboard/PatientDashboard.tsx","features/patients/details/PatientDetailedChat.tsx","features/patients/details/PatientDetailedHeader.tsx","features/patients/details/PatientDetailedInfo.tsx","features/patients/details/PatientDetailedSidebar.tsx","features/patients/details/PatientDetails.tsx","features/patients/form/PatientForm.tsx","features/cities/dashboard/CityFilters.tsx","features/cities/dashboard/CityListItem.tsx","features/cities/dashboard/CityList.tsx","features/cities/dashboard/CityDashboard.tsx","features/cities/details/CityDetailedChat.tsx","features/cities/details/CityDetailedHeader.tsx","features/cities/details/CityDetailedInfo.tsx","features/cities/details/CityDetailedSidebar.tsx","features/cities/details/CityDetails.tsx","features/cities/form/CityForm.tsx","features/errors/TestError.tsx","features/errors/ServerError.tsx","features/errors/NotFound.tsx","app/common/modals/ModalContainer.tsx","features/therapies/form/TherapyForm.tsx","features/therapies/details/TherapyDetailedChat.tsx","features/therapies/details/TherapyDetailedHeader.tsx","features/therapies/details/TherapyDetailedInfo.tsx","features/therapies/details/TherapyDetailedSidebar.tsx","features/therapies/details/TherapyDetails.tsx","features/therapies/dashboard/TherapyFilters.tsx","features/therapies/dashboard/TherapyListItem.tsx","features/therapies/dashboard/TherapyList.tsx","features/therapies/dashboard/TherapyDashboard.tsx","features/doctors/dashboard/DoctorListItem.tsx","features/doctors/dashboard/DoctorList.tsx","features/doctors/dashboard/DoctorFilters.tsx","features/doctors/dashboard/DoctorDashboard.tsx","features/doctors/details/DoctorDetailedHeader.tsx","features/doctors/details/DoctorDetailedInfo.tsx","features/doctors/details/DoctorDetailedSidebar.tsx","features/doctors/details/DoctorDetails.tsx","app/common/form/MySelectInput.tsx","app/common/options/cityOptions.ts","app/common/options/countryOptions.ts","features/doctors/form/DoctorForm.tsx","features/techEmployees/dashboard/TechEmployeeListItem.tsx","features/techEmployees/dashboard/TechEmployeeList.tsx","features/techEmployees/dashboard/TechEmployeeDashboard.tsx","features/techEmployees/form/techEmployeeForm.tsx","features/surgeries/dashboard/SurgeryFilters.tsx","features/surgeries/dashboard/SurgeryListItem.tsx","features/surgeries/dashboard/SurgeryList.tsx","features/surgeries/dashboard/SurgeryDashboard.tsx","features/surgeries/details/SurgeryDetailedChat.tsx","features/surgeries/details/SurgeryDetailedHeader.tsx","features/surgeries/details/SurgeryDetailedInfo.tsx","features/surgeries/details/SurgeryDetailedSidebar.tsx","features/surgeries/details/SurgeryDetails.tsx","features/surgeries/form/SurgeryForm.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","features/countries/dashboard/CountryFilters.tsx","features/countries/dashboard/CountryListItem.tsx","features/countries/dashboard/CountryList.tsx","features/countries/dashboard/CountryDashboard.tsx","features/countries/details/CountryDetailedChat.tsx","features/countries/details/CountryDetailedHeader.tsx","features/countries/details/CountryDetailedInfo.tsx","features/countries/details/CountryDetailedSidebar.tsx","features/countries/details/CountryDetails.tsx","features/countries/form/CountryForm.tsx","features/termins/dashboard/TerminListItem.tsx","features/termins/dashboard/TerminList.tsx","features/termins/dashboard/TerminDashboard.tsx","features/termins/details/TerminDetailedHeader.tsx","features/termins/details/TerminDetailedInfo.tsx","features/termins/details/TerminDetails.tsx","features/termins/form/TerminForm.tsx","features/rooms/dashboard/RoomListItem.tsx","features/rooms/dashboard/RoomList.tsx","features/rooms/dashboard/RoomFilters.tsx","features/rooms/dashboard/RoomDashboard.tsx","features/rooms/details/RoomDetailedHeader.tsx","features/rooms/details/RoomDetailedInfo.tsx","features/rooms/details/RoomDetailedSidebar.tsx","features/rooms/details/RoomDetails.tsx","features/rooms/form/RoomForm.tsx","features/tests/dashboard/TestListItem.tsx","features/tests/dashboard/TestList.tsx","features/tests/dashboard/TestDashboard.tsx","features/tests/form/TestForm.tsx","features/bloodtypes/dashboard/Add.tsx","features/bloodtypes/dashboard/BloodTypeListItem.tsx","features/bloodtypes/dashboard/BloodTypeList.tsx","features/bloodtypes/dashboard/image2.tsx","features/bloodtypes/dashboard/BloodTypeDashboard.tsx","features/emergencyDrivers/dashboard/EmergencyDriverListItem.tsx","features/emergencyDrivers/dashboard/EmergencyDriverList.tsx","features/emergencyDrivers/dashboard/EmergencyDriverFilters.tsx","features/emergencyDrivers/dashboard/EmergencyDriverDashboard.tsx","features/emergencyDrivers/details/EmergencyDriverDetailedHeader.tsx","features/emergencyDrivers/details/EmergencyDriverDetailedInfo.tsx","features/emergencyDrivers/details/EmergencyDriverDetailedSidebar.tsx","features/emergencyDrivers/details/EmergencyDriverDetails.tsx","features/emergencyDrivers/form/EmergencyDriverForm.tsx","features/medicines/dashboard/MedicineListItem.tsx","features/medicines/dashboard/MedicineList.tsx","features/medicines/dashboard/MedicineDashboard.tsx","features/medicines/details/MedicineDetailedHeader.tsx","features/medicines/details/MedicineDetailedInfo.tsx","features/medicines/details/MedicineDetails.tsx","features/medicines/form/MedicineForm.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","error","data","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Departments","list","details","id","create","department","update","attend","Termins","termin","Medicines","medicine","Receptionists","receptionist","Nurses","nurse","Farmacists","farmacist","Patients","patient","Tests","test","Account","current","login","user","register","Profiles","username","updateProfile","profile","Cities","city","Id","Countries","country","Therapies","therapy","Doctors","doctor","TechEmployees","techEmployee","Surgeries","surgery","BloodTypes","EmergencyDrivers","emergencyDriver","Rooms","room","Department","init","Object","assign","this","DepartmentFormValues","undefined","departmentName","departmentDescription","Profile","displayName","image","DepartmentStore","departmentRegistry","Map","selectedDepartment","selectedRegistry","editMode","loading","loadingInitial","loadDepartments","forEach","setDepartment","setLoadingInitial","console","log","loadDepartment","getDepartment","runInAction","userStore","isDoctor","departmentAttendees","some","isHost","hostUsername","host","find","x","set","state","createDepartment","departmentAttendee","newDepartment","updateDepartment","updatedDepartment","deleteDepartment","updateAttendance","filter","clearSelectedDepartment","makeAutoObservable","Array","from","values","sort","b","ReceptionistStore","receptionistRegistry","selectedReceptionist","loadReceptionists","setReceptionist","loadReceptionist","getReceptionist","createReceptionist","updateReceptionist","deleteReceptionist","NurseStore","nurseRegistry","selectedNurse","loadNurses","setNurse","datelindja","Date","loadNurse","getNurse","createNurse","updateNurse","deleteNurse","getDay","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setDisplayName","name","FarmacistStore","farmacistRegistry","selectedFarmacist","loadFarmacists","setFarmacist","dateOfJoining","loadFarmacist","getFarmacist","createFarmacist","updateFarmacist","deleteFarmacist","TestStore","testRegistry","selectedTest","loadTests","setTest","loadTest","getTest","createTest","updateTest","deleteTest","cmimi","PatientStore","patientRegistry","selectedPatient","loadPatients","setPatient","loadPatient","getPatient","dateofbirth","register_date","createPatient","updatePatient","deletePatient","getTime","CityStore","cityRegistry","selectedCity","loadCities","setCity","loadCity","getCity","createCity","updateCity","deleteCity","CityName","TherapyStore","therapyRegistry","selectedTherapy","loadTherapies","setTherapy","loadTherapy","getTherapy","createTherapy","updateTherapy","deleteTherapy","ProfileStore","loadingProfile","uploading","loadProfile","DoctorStore","doctorRegistry","selectedDoctor","loadDoctors","setDoctor","loadDoctor","getDoctor","createDoctor","updateDoctor","deleteDoctor","TechEmployeeStore","techEmployeeRegistry","selectedTechEmployee","loadTechEmployees","TechEmployee","setTechEmployee","loadTechEmployee","getTechEmployee","createTechEmployee","updateTechEmployee","deleteTechEmployee","SurgeryStore","surgeryRegistry","selectedSurgery","loadSurgeries","setSurgery","loadSurgery","getSurgery","createSurgery","updateSurgery","deleteSurgery","CountryStore","countryRegistry","selectedCountry","loadCountries","setCountry","loadCountry","getCountry","createCountry","updateCountry","deleteCountry","TerminStore","terminRegistry","selectedTermin","loadTermins","setTermin","loadTermin","getTermin","terminTime","createTermin","updateTermin","updatedTermin","deleteTermin","clearSelectedTermin","BloodTypeStore","bloodTypeRegistry","selectedbloodType","loadBloodTypes","bloodType","setBloodType","type","EmergencyDriverStore","emergencyDriverRegistry","selectedEmergencyDriver","loadEmergencyDrivers","setEmergencyDriver","loadEmergencyDriver","getEmergencyDriver","Dateofbirth","createEmergencyDriver","updateEmergencyDriver","deleteEmergencyDriver","RoomStore","roomRegistry","selectedRoom","loadRooms","setRoom","loadRoom","getRoom","createRoom","updateRoom","deleteRoom","MedicineStore","medicineRegistry","selectedMedicine","loadMedicines","setMedicine","loadMedicine","getMedicine","createMedicine","updateMedicine","updatedMedicine","deleteMedicine","clearSelectedMedicine","medicineName","receptionistStore","departmentStore","medicineStore","terminStore","nurseStore","farmacistStore","testStore","getItem","appLoaded","setAppLoaded","reaction","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","departmentId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","patientStore","cityStore","therapyStore","doctorStore","techEmployeeStore","surgeryStore","roomStore","countryStore","bloodTypeStore","emergencyDriverStore","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Dropdown","text","Button","fluid","position","Image","avatar","spaced","pointing","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","render","marginBottom","positive","ValidationErrors","Message","List","map","err","i","validationSchema","Yup","required","isValid","dirty","disabled","Segment","vertical","size","isLoggedIn","LoadingComponent","Dimmer","active","Loader","Card","Content","Description","str","length","substring","truncate","bio","extra","Icon","horizontal","Popup","hoverable","trigger","circular","DepartmentListItem","Group","secondary","clearing","floated","departmentsByName","useEffect","Grid","Column","width","attached","border","resetForm","rows","onKeyPress","e","shiftKey","preventDefault","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","departmentImageStyle","departmentImageTextStyle","bottom","left","height","padding","relaxed","divided","ribbon","verticalAlign","Extra","useParams","MyTextArea","useHistory","useState","sub","enableReinitialize","uuid","handleFormSubmit","ReceptionistFilters","marginTop","ReceptionistListItem","dob","phone","receptionistsByDate","Row","columns","Actions","Action","reply","TextArea","labelPosition","primary","receptionistImageStyle","receptionistImageTextStyle","ReceptionistDetailedSidebar","MyDateInput","helpers","selected","value","onChange","setValue","lastName","gender","street_address","postal_code","lastname","nullable","newReceptionist","placeholderText","showTimeSelect","timeCaption","dateFormat","NurseFilters","NurseListItem","gjinia","emri","mbiemri","format","adresa","confirm","nursesByDate","nurseImageStyle","nurseImageTextStyle","qyteti","paga","departments","cities","newNurse","dep","FarmacistFilters","FarmacistListItem","farmacistsByDate","FarmacistImageStyle","FarmacistImageTextStyle","degree","tel","newFarmacist","PatientListItem","marker","patientsByDate","PatientFilters","patientImageStyle","patientImageTextStyle","Patient","other_det","bloodtypes","surname","weight","newPatient","CityFilters","ZipCode","citiesByName","CityList","CityImageStyle","CityImageTextStyle","newCity","TestErrors","widths","baseUrl","message","NotFound","Inline","Modal","onClose","Pershkrimi","newTherapy","therapyImageStyle","therapyImageTextStyle","TherapyFilters","TherapyList","therapiesByName","DoctorListItem","doctorsByDate","DoctorFilters","doctorImageStyle","doctorImageTextStyle","Doctor","designation","MySelectInput","Select","clearable","options","d","onBlur","setTouched","cityOptions","countryOptions","newDoctor","TechEmployeeListItem","techEmployeesByDate","newTechEmployee","SrgeryFilters","SurgeryListItem","SurgeryName","Pagesa","Terapia","surgeriesByDate","surgeryImageStyle","surgeryImageTextStyle","Descrption","newSurgery","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","menu","menuPosition","CountryFilters","CountryListItem","CountryName","Population","Goverment","countriesByName","countryImageStyle","departentImageTextStyle","Location","Nation","newCountry","TerminListItem","terminDepartment","terminDescription","terminDoctor","terminsByDate","terminImageStyle","terminImageTextStyle","React","setOpen","onOpen","newTermin","RoomListItem","floor_no","stauts","total_bed_occupied","roomsByDate","RoomFilters","roomImageStyle","roomImageTextStyle","Room","total_bed","newRoom","TestListItem","pershkrimi","testsByName","newTest","Add","BloodTypeListItem","background-color","bloodByType","Image2","EmergencyDriverListItem","Name","Gender","Phone","emergencyDriversByDate","emergencyDriverImageStyle","emergencyDriverImageTextStyle","EmergencyDriver","Street_address","City","Surname","Username","Password","Country","Postal_code","newEmergencyDriver","MedicineListItem","medicineDescription","medicineDepartment","medicinePrice","medicinesByName","medicineImageStyle","medicineImageTextStyle","newMedicine","location","useLocation","finally","hideProgressBar","path","component","HomePage","DepartmentDashboard","DepartmentDetails","DepartmentForm","TerminDashboard","TerminDetails","TerminForm","MedicineDashboard","MedicineDetails","MedicineForm","ReceptionistDashboard","ReceptionistDetails","ReceptionistForm","NurseDashboard","NurseDetails","NurseForm","FarmacistDashboard","FarmacistDetails","FarmacistForm","TechEmployeeDashboard","TechEmployeeForm","PatientDashboard","PatientDetails","PatientForm","CityDashboard","CityDetails","CityForm","TherapyDashboard","TherapyDetails","TherapyForm","DoctorDashboard","DoctorDetails","DoctorForm","SurgeryDashboard","SurgeryDetails","SurgeryForm","RoomDashboard","RoomDetails","RoomForm","CountryDashboard","CountryDetails","CountryForm","EmergencyDriverDashboard","EmergencyDriverDetails","EmergencyDriverForm","TestDashboard","TestForm","BloodTypeDashboard","ProfilePage","ServerError","LoginForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.0eadd360.chunk.js","sourcesContent":["import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Department, DepartmentFormValues } from '../models/department';\r\nimport { Test } from '../models/test';\r\nimport { Farmacist } from '../models/farmacist';\r\nimport { Nurse } from '../models/nurse';\r\nimport { Receptionist } from '../models/receptionist';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\nimport { Patient } from '../models/patient';\r\nimport { City } from '../models/city';\r\nimport { Therapy } from '../models/therapy';\r\nimport { Profile } from '../models/profile';\r\nimport { Doctor } from '../models/doctor';\r\nimport { TechEmployee } from '../models/techEmployee';\r\nimport { Surgery } from '../models/surgery';\r\nimport { Country } from '../models/country';\r\nimport { Termin } from '../models/termin';\r\nimport { BloodType } from '../models/bloodTypes';\r\nimport { EmergencyDriver } from '../models/emergencyDriver';\r\nimport { Room } from '../models/room';\r\nimport { Medicine } from '../models/medicine';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n        return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Departments = {\r\n    list: () => requests.get<Department[]>('/departments'),\r\n    details: (id: string) => requests.get<Department>(`/departments/${id}`),\r\n    create: (department: DepartmentFormValues) => requests.post<void>('/departments', department),\r\n    update: (department: DepartmentFormValues) => requests.put<void>(`/departments/${department.id}`, department),\r\n    delete: (id: string) => requests.del<void>(`/departments/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/departments/${id}/attend`, {})\r\n}\r\nconst Termins = {\r\n    list: () => requests.get<Termin[]>('/termins'),\r\n    details: (id: string) => requests.get<Termin>(`/termins/${id}`),\r\n    create: (termin: Termin) => requests.post<void>('/termins', termin),\r\n    update: (termin: Termin) => requests.put<void>(`/termins/${termin.id}`, termin),\r\n    delete: (id: string) => requests.del<void>(`/termins/${id}`),\r\n}\r\nconst Medicines = {\r\n    list: () => requests.get<Medicine[]>('/medicines'),\r\n    details: (id: string) => requests.get<Medicine>(`/medicines/${id}`),\r\n    create: (medicine: Medicine) => requests.post<void>('/medicines', medicine),\r\n    update: (medicine: Medicine) => requests.put<void>(`/medicines/${medicine.id}`, medicine),\r\n    delete: (id: string) => requests.del<void>(`/medicines/${id}`),\r\n}\r\nconst Receptionists = {\r\n    list: () => requests.get<Receptionist[]>('/receptionists'),\r\n    details: (id: string) => requests.get<Receptionist>(`/receptionists/${id}`),\r\n    create: (receptionist: Receptionist) => axios.post<void>('/receptionists', receptionist),\r\n    update: (receptionist: Receptionist) => axios.put<void>(`/receptionists/${receptionist.id}`, receptionist),\r\n    delete: (id: string) => axios.delete<void>(`/receptionists/${id}`)\r\n}\r\nconst Nurses = {\r\n    list: () => requests.get<Nurse[]>('/nurses'),\r\n    details: (id: string) => requests.get<Nurse>(`/nurses/${id}`),\r\n    create: (nurse: Nurse) => axios.post<void>('/nurses', nurse),\r\n    update: (nurse: Nurse) => axios.put<void>(`/nurses/${nurse.id}`, nurse),\r\n    delete: (id: string) => axios.delete<void>(`/nurses/${id}`)\r\n}\r\nconst Farmacists = {\r\n    list: () => requests.get<Farmacist[]>('/farmacists'),\r\n    details: (id: string) => requests.get<Farmacist>(`/farmacists/${id}`),\r\n    create: (farmacist: Farmacist) => axios.post<void>('/farmacists', farmacist),\r\n    update: (farmacist: Farmacist) => axios.put<void>(`/farmacists/${farmacist.id}`, farmacist),\r\n    delete: (id: string) => axios.delete<void>(`/farmacists/${id}`)\r\n}\r\nconst Patients ={\r\n    list: () => requests.get<Patient[]>('/patients'),\r\n    details: (id:string) => requests.get<Patient>(`/patients/${id}`),\r\n    create: (patient: Patient) => axios.post<void>('/patients', patient),\r\n    update: (patient: Patient) => axios.put<void>(`/patients/${patient.id}`,patient),\r\n    delete: (id: string) => axios.delete<void>(`/patients/${id}`)\r\n}\r\nconst Tests = {\r\n    list: () => requests.get<Test[]>('/tests'),\r\n    details: (id: string) => requests.get<Test>(`/tests/${id}`),\r\n    create: (test: Test) => axios.post<void>('/tests', test),\r\n    update: (test: Test) => axios.put<void>(`/tests/${test.id}`, test),\r\n    delete: (id: string) => axios.delete<void>(`/tests/${id}`)\r\n}\r\nconst TechEmployees = {\r\n    list: () => requests.get<TechEmployee[]>('/techEmployees'),\r\n    details: (id: string) => requests.get<TechEmployee>(`/techEmployees/${id}`),\r\n    create: (techEmployee: TechEmployee) => axios.post<void>('/techEmployees', techEmployee),\r\n    update: (techEmployee: TechEmployee) => axios.put<void>(`/techEmployees/${techEmployee.id}`, techEmployee),\r\n    delete: (id: string) => axios.delete<void>(`/techEmployees/${id}`)\r\n}\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile)\r\n}\r\nconst Cities = {\r\n    list: () => requests.get<City[]>('/cities'),\r\n    details: (id: string) => requests.get<City>(`/cities/${id}`),\r\n    create: (city: City) => axios.post<void>('/cities', city),\r\n    update: (city: City) => axios.put<void>(`/cities/${city.Id}`, city),\r\n    delete: (id: string) => axios.delete<void>(`/cities/${id}`)\r\n}\r\nconst Therapies = {\r\n    list: () => requests.get<Therapy[]>('/therapies'),\r\n    details: (id: string) => requests.get<Therapy>(`/therapies/${id}`),\r\n    create: (therapy: Therapy) => axios.post<void>('/therapies', therapy),\r\n    update: (therapy: Therapy) => axios.put<void>(`/therapies/${therapy.id}`, therapy),\r\n    delete: (id: string) => axios.delete<void>(`/therapies/${id}`)\r\n}\r\nconst Doctors ={\r\n    list: () => requests.get<Doctor[]>('/doctors'),\r\n    details: (id:string) => requests.get<Doctor>(`/doctors/${id}`),\r\n    create: (doctor: Doctor) => axios.post<void>('/doctors', doctor),\r\n    update: (doctor: Doctor) => axios.put<void>(`/doctors/${doctor.id}`,doctor),\r\n    delete: (id: string) => axios.delete<void>(`/doctors/${id}`)\r\n}\r\nconst Surgeries = {\r\n    list: () => requests.get<Surgery[]>('/surgeries'),\r\n    details: (id: string) => requests.get<Surgery>(`/surgeries/${id}`),\r\n    create: (surgery: Surgery) => axios.post<void>('/surgeries', surgery),\r\n    update: (surgery: Surgery) => axios.put<void>(`/surgeries/${surgery.Id}`, surgery),\r\n    delete: (id: string) => axios.delete<void>(`/surgeries/${id}`)\r\n}\r\nconst Rooms ={\r\n    list: () => requests.get<Room[]>('/rooms'),\r\n    details: (id:string) => requests.get<Room>(`/rooms/${id}`),\r\n    create: (room: Room) => axios.post<void>('/rooms', room),\r\n    update: (room: Room) => axios.put<void>(`/rooms/${room.id}`,room),\r\n    delete: (id: string) => axios.delete<void>(`/rooms/${id}`)\r\n}\r\nconst Countries = {\r\n    list: () => requests.get<Country[]>('/countries'),\r\n    details: (id: string) => requests.get<Country>(`/countries/${id}`),\r\n    create: (country: Country) => axios.post<void>('/countries', country),\r\n    update: (country: Country) => axios.put<void>(`/countries/${country.Id}`, country),\r\n    delete: (id: string) => axios.delete<void>(`/countries/${id}`)\r\n}\r\nconst BloodTypes = {\r\n    list: () => requests.get<BloodType[]>('/bloodTypes'),\r\n\r\n}\r\nconst EmergencyDrivers = {\r\n    list: () => requests.get<EmergencyDriver[]>('/emergencyDrivers'),\r\n    details: (id: string) => requests.get<EmergencyDriver>(`/emergencyDrivers/${id}`),\r\n    create: (emergencyDriver: EmergencyDriver) => axios.post<void>('/emergencyDrivers', emergencyDriver),\r\n    update: (emergencyDriver: EmergencyDriver) => axios.put<void>(`/emergencyDrivers/${emergencyDriver.Id}`, emergencyDriver),\r\n    delete: (id: string) => axios.delete<void>(`/emergencyDrivers/${id}`)\r\n}\r\nconst agent = {\r\n    Departments,\r\n    Termins,\r\n    Medicines,\r\n    Receptionists,\r\n    Nurses,\r\n    Farmacists,\r\n    Patients,\r\n    Tests,\r\n    Account,\r\n    Profiles,\r\n    Cities,\r\n    Countries,\r\n    Therapies,\r\n    Doctors,\r\n    TechEmployees,\r\n    Surgeries,\r\n    BloodTypes,\r\n    EmergencyDrivers,\r\n    Rooms,\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Department {\r\n    id: string;\r\n    departmentName: string;\r\n    departmentDescription: string;\r\n    hostUsername: string;\r\n    isDoctor: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    departmentAttendees: Profile[];\r\n}\r\n\r\nexport class Department implements Department {\r\n    constructor(init?: DepartmentFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class DepartmentFormValues {\r\n    id?: string = undefined;\r\n    departmentName: string = '';\r\n    departmentDescription: string = '';\r\n\r\n    constructor(department?: DepartmentFormValues) {\r\n        if (department) {\r\n            this.id = department.id;\r\n            this.departmentName = department.departmentName;\r\n            this.departmentDescription = department.departmentDescription;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Department, DepartmentFormValues } from \"../models/department\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class DepartmentStore {\r\n    departmentRegistry = new Map<string, Department>();\r\n    selectedDepartment: Department | undefined = undefined;\r\n    selectedRegistry= this.departmentRegistry;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get departmentsByName() {\r\n        return Array.from(this.departmentRegistry.values()).sort((a, b) => a.departmentName > b.departmentName ? 1:-1);\r\n    }\r\n\r\n    loadDepartments = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const departments = await agent.Departments.list();\r\n                departments.forEach(department => {\r\n                    this.setDepartment(department);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    loadDepartment = async (id: string) => {\r\n        let department = this.getDepartment(id);\r\n        if (department) {\r\n            this.selectedDepartment = department;\r\n            return department;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                department = await agent.Departments.details(id);\r\n                this.setDepartment(department);\r\n                runInAction(() => {\r\n                    this.selectedDepartment = department;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return department;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n        \r\n    private setDepartment = (department: Department) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            department.isDoctor = department.departmentAttendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            department.isHost = department.hostUsername === user.username;\r\n            department.host = department.departmentAttendees?.find(x => x.username === department.hostUsername);\r\n        }\r\n        // department.date = new Date(department.date!);\r\n        this.departmentRegistry.set(department.id, department);\r\n    }\r\n\r\n    private getDepartment = (id: string) => {\r\n        return this.departmentRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createDepartment = async (department: DepartmentFormValues) => {\r\n        const user = store.userStore.user;\r\n        const departmentAttendee = new Profile(user!);\r\n        try {\r\n            await agent.Departments.create(department);\r\n            const newDepartment = new Department(department);\r\n            newDepartment.hostUsername = user!.username;\r\n            newDepartment.departmentAttendees = [departmentAttendee];\r\n            this.setDepartment(newDepartment);\r\n            runInAction(() => {\r\n                this.selectedDepartment = newDepartment;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateDepartment = async (department: DepartmentFormValues) => {\r\n        try {\r\n            await agent.Departments.update(department);\r\n            runInAction(() => {\r\n                if (department.id) {\r\n                    let updatedDepartment = {...this.getDepartment(department.id), ...department}\r\n                    this.departmentRegistry.set(department.id, updatedDepartment as Department);\r\n                    this.selectedDepartment = updatedDepartment as Department;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteDepartment = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Departments.delete(id);\r\n            runInAction(() => {\r\n                this.departmentRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Departments.attend(this.selectedDepartment!.id);\r\n            runInAction(() => {\r\n                if (this.selectedDepartment?.isDoctor) {\r\n                    this.selectedDepartment.departmentAttendees = \r\n                        this.selectedDepartment.departmentAttendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedDepartment.isDoctor = false;\r\n                } else {\r\n                    const departmentAttendee = new Profile(user!);\r\n                    this.selectedDepartment?.departmentAttendees?.push(departmentAttendee);\r\n                    this.selectedDepartment!.isDoctor = true;\r\n                }\r\n                this.departmentRegistry.set(this.selectedDepartment!.id, this.selectedDepartment!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedDepartment = () => {\r\n        this.selectedDepartment = undefined;\r\n    }\r\n\r\n    // Use this method at Termin crud Video 15.7\r\n    // cancelDepartmentToggle = async () => {\r\n    //     this.loading = true;\r\n    //     try {\r\n    //         await agent.Departments.attend(this.selectedDepartment!.id);\r\n    //         runInAction(() => {\r\n    //             this.selectedDepartment!.isCancelled = !this.selectedDepartment?.isCancelled;\r\n    //             this.departmentRegistry.set(this.selectedDepartment!.id, this.selectedDepartment!);\r\n    //         })\r\n    //     } catch (error) {\r\n    //         console.log(error);\r\n    //     } finally {\r\n    //         runInAction(() => this.loading = false);\r\n    //     }\r\n    // }\r\n}","import { makeAutoObservable, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Receptionist } from '../models/receptionist';\r\n\r\nexport default class ReceptionistStore {\r\n    receptionistRegistry = new Map<string, Receptionist>();\r\n    selectedReceptionist: Receptionist | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get receptionistsByDate() {\r\n        return Array.from(this.receptionistRegistry.values())/*.sort((a, b) => \r\n            a.date!.getTime() - b.date!.getTime());*/\r\n    }\r\n\r\n    // get groupedReceptionists() {\r\n    //     return Object.entries(\r\n    //         this.receptionistsByDate.reduce((receptionists, receptionist) => {\r\n    //             const date = format(activity.date!, 'dd MMM yyyy');\r\n    //             receptionists[date] = receptionists[date] ? [...receptionists[date], receptionist] : [receptionist];\r\n    //             return receptionists;\r\n    //         }, {} as {[key: string]: Receptionist[]})\r\n    //     )\r\n    // }\r\n\r\n    loadReceptionists = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const receptionists = await agent.Receptionists.list();\r\n            receptionists.forEach(receptionist => {\r\n                this.setReceptionist(receptionist);\r\n            })\r\n            this.setLoadingInitial(false);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    private setReceptionist = (receptionist: Receptionist) => {\r\n        // receptionist.dob = new Date(receptionist.dob!);\r\n        this.receptionistRegistry.set(receptionist.id, receptionist);\r\n    }\r\n\r\n    loadReceptionist = async (id: string) => {\r\n        let receptionist = this.getReceptionist(id);\r\n        if (receptionist) {\r\n            this.selectedReceptionist = receptionist;\r\n            return receptionist;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                receptionist = await agent.Receptionists.details(id);\r\n                this.setReceptionist(receptionist);\r\n                runInAction(() => {\r\n                    this.selectedReceptionist = receptionist;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return receptionist;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getReceptionist = (id: string) => {\r\n        return this.receptionistRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createReceptionist = async (receptionist: Receptionist) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Receptionists.create(receptionist);\r\n            runInAction(() => {\r\n                this.receptionistRegistry.set(receptionist.id, receptionist);\r\n                this.selectedReceptionist = receptionist;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n    updateReceptionist = async (receptionist: Receptionist) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Receptionists.update(receptionist);\r\n            runInAction(() => {\r\n                this.receptionistRegistry.set(receptionist.id, receptionist);\r\n                this.selectedReceptionist = receptionist;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteReceptionist = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Receptionists.delete(id);\r\n            runInAction(() => {\r\n                this.receptionistRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Nurse } from \"../models/nurse\";\r\n\r\nexport default class NurseStore {\r\n    nurseRegistry = new Map<string, Nurse>();\r\n    selectedNurse: Nurse | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get nursesByDate() {\r\n        return Array.from(this.nurseRegistry.values()).sort((a,b)=>\r\n            a.datelindja!.getDay()-b.datelindja!.getDay());\r\n        \r\n    }\r\n\r\n    loadNurses = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const nurses = await agent.Nurses.list();\r\n                nurses.forEach(nurse => {\r\n                    this.setNurse(nurse);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n    \r\n    private setNurse = (nurse: Nurse) => {\r\n        nurse.datelindja = new Date(nurse.datelindja!);\r\n        this.nurseRegistry.set(nurse.id, nurse);\r\n    }\r\n\r\n    loadNurse = async (id: string) => {\r\n        let nurse = this.getNurse(id);\r\n        if (nurse) {\r\n            this.selectedNurse = nurse;\r\n            return nurse;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                nurse = await agent.Nurses.details(id);\r\n                this.setNurse(nurse);\r\n                runInAction(() => {\r\n                    this.selectedNurse = nurse;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return nurse;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getNurse = (id: string) => {\r\n        return this.nurseRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createNurse = async (nurse: Nurse) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Nurses.create(nurse);\r\n            runInAction(() => {\r\n                this.nurseRegistry.set(nurse.id, nurse);\r\n                this.selectedNurse = nurse;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateNurse = async (nurse: Nurse) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Nurses.update(nurse);\r\n            runInAction(() => {\r\n                this.nurseRegistry.set(nurse.id, nurse);\r\n                this.selectedNurse = nurse;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteNurse = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Nurses.delete(id);\r\n            runInAction(() => {\r\n                this.nurseRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n// function b(a: any, b: any) {\r\n//     throw new Error(\"Function not implemented.\");\r\n// }\r\n// function a(a: any, b: (a: any, b: any) => void) {\r\n//     throw new Error(\"Function not implemented.\");\r\n// }\r\n\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/departments');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/departments');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Farmacist } from \"../models/farmacist\";\r\n\r\nexport default class FarmacistStore {\r\n    farmacistRegistry = new Map<string, Farmacist>();\r\n    selectedFarmacist: Farmacist | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get farmacistsByDate() {\r\n        return Array.from(this.farmacistRegistry.values()).sort((a,b)=>\r\n            a.dateOfJoining!.getDay()-b.dateOfJoining!.getDay());\r\n        \r\n    }\r\n\r\n    loadFarmacists = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const farmacists = await agent.Farmacists.list();\r\n                farmacists.forEach(farmacist => {\r\n                    this.setFarmacist(farmacist);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n    \r\n    private setFarmacist = (farmacist: Farmacist) => {\r\n        farmacist.dateOfJoining = new Date(farmacist.dateOfJoining!);\r\n        this.farmacistRegistry.set(farmacist.id, farmacist);\r\n    }\r\n\r\n    loadFarmacist = async (id: string) => {\r\n        let farmacist = this.getFarmacist(id);\r\n        if (farmacist) {\r\n            this.selectedFarmacist = farmacist;\r\n            return farmacist;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                farmacist = await agent.Farmacists.details(id);\r\n                this.setFarmacist(farmacist);\r\n                runInAction(() => {\r\n                    this.selectedFarmacist = farmacist;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return farmacist;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getFarmacist = (id: string) => {\r\n        return this.farmacistRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createFarmacist = async (farmacist: Farmacist) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Farmacists.create(farmacist);\r\n            runInAction(() => {\r\n                this.farmacistRegistry.set(farmacist.id, farmacist);\r\n                this.selectedFarmacist = farmacist;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateFarmacist = async (farmacist: Farmacist) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Farmacists.update(farmacist);\r\n            runInAction(() => {\r\n                this.farmacistRegistry.set(farmacist.id, farmacist);\r\n                this.selectedFarmacist = farmacist;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteFarmacist = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Farmacists.delete(id);\r\n            runInAction(() => {\r\n                this.farmacistRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n// function b(a: any, b: any) {\r\n//     throw new Error(\"Function not implemented.\");\r\n// }\r\n// function a(a: any, b: (a: any, b: any) => void) {\r\n//     throw new Error(\"Function not implemented.\");\r\n// }\r\n\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Test } from \"../models/test\";\r\n\r\nexport default class TestStore {\r\n    testRegistry = new Map<string, Test>();\r\n    selectedTest: Test | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n    get testsByName() {\r\n        return Array.from(this.testRegistry.values()).sort((a, b) => a.cmimi < b.cmimi ? 1:-1);\r\n        \r\n    }\r\n    loadTests = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const tests = await agent.Tests.list();\r\n                tests.forEach(test => {\r\n                    this.setTest(test);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n    \r\n    private setTest = (test: Test) => {\r\n\r\n        this.testRegistry.set(test.id, test);\r\n    }\r\n\r\n    loadTest = async (id: string) => {\r\n        let test = this.getTest(id);\r\n        if (test) {\r\n            this.selectedTest = test;\r\n            return test;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                test = await agent.Tests.details(id);\r\n                this.setTest(test);\r\n                runInAction(() => {\r\n                    this.selectedTest = test;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return test;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getTest = (id: string) => {\r\n        return this.testRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createTest = async (test: Test) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Tests.create(test);\r\n            runInAction(() => {\r\n                this.testRegistry.set(test.id, test);\r\n                this.selectedTest = test;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateTest = async (test: Test) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Tests.update(test);\r\n            runInAction(() => {\r\n                this.testRegistry.set(test.id, test);\r\n                this.selectedTest = test;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteTest = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Tests.delete(id);\r\n            runInAction(() => {\r\n                this.testRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n// function b(a: any, b: any) {\r\n//     throw new Error(\"Function not implemented.\");\r\n// }\r\n// function a(a: any, b: (a: any, b: any) => void) {\r\n//     throw new Error(\"Function not implemented.\");\r\n// }\r\n\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Patient } from \"../models/patient\";\r\n\r\nexport default class PatientStore{\r\n    patientRegistry = new Map<string, Patient>();\r\n    selectedPatient: Patient | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor () {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get patientsByDate(){\r\n        return Array.from(this.patientRegistry.values()).sort((a, b) => \r\n               a.dateofbirth!.getTime() - b.dateofbirth!.getTime());\r\n    }\r\n\r\n   /**  get groupedPatients() {\r\n        return Object.entries(\r\n            this.patientsByDate.reduce((patients, patient) => {\r\n                const register_date= patient.register_date;\r\n                patients[register_date] = patients[register_date] ? [...patients[register_date], patients] : [patient];\r\n                return patients;\r\n            }, {} as {[key: string]: Patient[]})\r\n        )\r\n    }*/\r\n\r\n    loadPatients = async () => { \r\n        this.loadingInitial= true;\r\n        try{\r\n                const patients = await agent.Patients.list();\r\n                patients.forEach(patient =>{\r\n                    this.setPatient(patient);\r\n                })\r\n                  this.setLoadingInitial(false);\r\n                }catch (error) {\r\n                  console.log(error);\r\n                  this.setLoadingInitial(false);   \r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    loadPatient = async (id:string) => {\r\n        let patient = this.getPatient(id);\r\n        if(patient) {\r\n            this.selectedPatient = patient;\r\n            return patient;\r\n        }else {\r\n            this.loadingInitial = true;\r\n            try{\r\n                patient = await agent.Patients.details(id);\r\n                this.setPatient(patient);\r\n                runInAction(() => {\r\n                    this.selectedPatient= patient;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return patient;\r\n            }catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setPatient = (patient: Patient) => {\r\n        patient.dateofbirth= new Date(patient.dateofbirth!);\r\n        patient.register_date= new Date(patient.register_date!);\r\n        this.patientRegistry.set(patient.id, patient);\r\n    }\r\n\r\n    private getPatient = (id:string) =>{\r\n        return this.patientRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n   \r\n    createPatient = async (patient: Patient) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Patients.create(patient);\r\n            runInAction(() => {\r\n                this.patientRegistry.set(patient.id, patient);\r\n                this.selectedPatient = patient;\r\n                this.editMode = false;\r\n                this.loading = false;//\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    updatePatient = async (patient : Patient) => {\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Patients.update(patient);\r\n            runInAction(() => {\r\n                this.patientRegistry.set(patient.id, patient);\r\n                this.selectedPatient = patient;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n\r\n        }catch(error) {\r\n            console.log(error);\r\n            runInAction(() =>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePatient = async (id: string) =>{\r\n        this.loading = true;\r\n        try{\r\n              await agent.Patients.delete(id);\r\n              runInAction(() =>{\r\n                this.patientRegistry.delete(id);\r\n                this.loading = false;\r\n              })\r\n        }catch(error) {\r\n            console.log(error);  \r\n            runInAction(()=>{\r\n                this.loading = false;\r\n\r\n            })\r\n        }\r\n    }\r\n   \r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { City } from \"../models/city\";\r\n\r\nexport default class CityStore {\r\n    cityRegistry = new Map<string, City>();\r\n    selectedCity: City | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get citiesByDate() {\r\n        return Array.from(this.cityRegistry.values())\r\n    }\r\n    get citiesByName() {\r\n        return Array.from(this.cityRegistry.values()).sort((a, b) => a.CityName > b.CityName ? 1:-1);\r\n    }\r\n    loadCities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const cities = await agent.Cities.list();\r\n                cities.forEach(city => {\r\n                    this.setCity(city);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    private setCity = (city: City) => {\r\n        this.cityRegistry.set(city.Id, city);\r\n    }\r\n\r\n    loadCity = async (id: string) => {\r\n        let city = this.getCity(id);\r\n        if (city) {\r\n            this.selectedCity = city;\r\n            return city;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                city = await agent.Cities.details(id);\r\n                this.setCity(city);\r\n                runInAction(() => {\r\n                    this.selectedCity = city;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return city;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCity = (id: string) => {\r\n        return this.cityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createCity = async (city: City) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Cities.create(city);\r\n            runInAction(() => {\r\n                this.cityRegistry.set(city.Id, city);\r\n                this.selectedCity = city;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateCity = async (city: City) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Cities.update(city);\r\n            runInAction(() => {\r\n                this.cityRegistry.set(city.Id, city);\r\n                this.selectedCity = city;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteCity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Cities.delete(id);\r\n            runInAction(() => {\r\n                this.cityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Therapy } from \"../models/therapy\";\r\n\r\nexport default class TherapyStore {\r\n    therapyRegistry = new Map<string, Therapy>();\r\n    selectedTherapy: Therapy | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get therapiesByDate() {\r\n        return Array.from(this.therapyRegistry.values())\r\n        \r\n    }\r\n    get therapiesByName() {\r\n        return Array.from(this.therapyRegistry.values())\r\n        \r\n    }\r\n\r\n    loadTherapies = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const therapies = await agent.Therapies.list();\r\n                therapies.forEach(therapy => {\r\n                    this.setTherapy(therapy);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n    \r\n    private setTherapy = (therapy: Therapy) => {\r\n        this.therapyRegistry.set(therapy.id, therapy);\r\n    }\r\n\r\n    loadTherapy = async (id: string) => {\r\n        let therapy = this.getTherapy(id);\r\n        if (therapy) {\r\n            this.selectedTherapy = therapy;\r\n            return therapy;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                therapy = await agent.Therapies.details(id);\r\n                this.setTherapy(therapy);\r\n                runInAction(() => {\r\n                    this.selectedTherapy = therapy;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return therapy;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getTherapy = (id: string) => {\r\n        return this.therapyRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createTherapy = async (therapy: Therapy) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Therapies.create(therapy);\r\n            runInAction(() => {\r\n                this.therapyRegistry.set(therapy.id, therapy);\r\n                this.selectedTherapy = therapy;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateTherapy = async (therapy: Therapy) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Therapies.update(therapy);\r\n            runInAction(() => {\r\n                this.therapyRegistry.set(therapy.id, therapy);\r\n                this.selectedTherapy = therapy;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteTherapy = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Therapies.delete(id);\r\n            runInAction(() => {\r\n                this.therapyRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Doctor } from \"../models/doctor\";\r\n\r\nexport default class DoctorStore{\r\n    doctorRegistry = new Map<string, Doctor>();\r\n    selectedDoctor: Doctor | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial =false;\r\n\r\n\r\n    constructor () {\r\n        makeAutoObservable(this)\r\n\r\n    }\r\n\r\n    get doctorsByDate(){\r\n        return Array.from(this.doctorRegistry.values()).sort((a, b) => \r\n             a.dateofbirth!.getTime() - b.dateofbirth!.getTime());   \r\n    }\r\n\r\n\r\n\r\n    loadDoctors = async () => { \r\n        this.loadingInitial= true;\r\n        try{\r\n                const doctors = await agent.Doctors.list();\r\n                doctors.forEach(doctor =>{\r\n                    this.setDoctor(doctor);\r\n                })\r\n                  this.setLoadingInitial(false);\r\n                }catch (error) {\r\n                  console.log(error);\r\n                  this.setLoadingInitial(false);   \r\n        }\r\n    }\r\n    \r\n    loadDoctor = async (id:string) => {\r\n        let doctor = this.getDoctor(id);\r\n        if(doctor) {\r\n            this.selectedDoctor = doctor;\r\n            return doctor;\r\n        }else {\r\n            this.loadingInitial = true;\r\n            try{\r\n                doctor = await agent.Doctors.details(id);\r\n                this.setDoctor(doctor);\r\n                runInAction(() => {\r\n                    this.selectedDoctor= doctor;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return doctor;\r\n            }catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setDoctor = (doctor: Doctor) => {\r\n        doctor.dateofbirth= new Date(doctor.dateofbirth!);\r\n        this.doctorRegistry.set(doctor.id, doctor);\r\n    }\r\n\r\n    private getDoctor = (id:string) =>{\r\n        return this.doctorRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n   \r\n    createDoctor = async (doctor: Doctor) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Doctors.create(doctor);\r\n            runInAction(() => {\r\n                this.doctorRegistry.set(doctor.id, doctor);\r\n                this.selectedDoctor = doctor;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    updateDoctor = async (doctor : Doctor) => {\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Doctors.update(doctor);\r\n            runInAction(() => {\r\n                this.doctorRegistry.set(doctor.id, doctor);\r\n                this.selectedDoctor = doctor;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n\r\n        }catch(error) {\r\n            console.log(error);\r\n            runInAction(() =>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteDoctor = async (id: string) =>{\r\n        this.loading = true;\r\n        try{\r\n              await agent.Doctors.delete(id);\r\n              runInAction(() =>{\r\n                this.doctorRegistry.delete(id);\r\n                this.loading = false;\r\n              })\r\n        }catch(error) {\r\n            console.log(error);  \r\n            runInAction(()=>{\r\n                this.loading = false;\r\n\r\n            })\r\n        }\r\n    }\r\n   \r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { TechEmployee } from \"../models/techEmployee\";\r\n\r\nexport default class TechEmployeeStore {\r\n    techEmployeeRegistry = new Map<string, TechEmployee>();\r\n    selectedTechEmployee: TechEmployee | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get techEmployeesByDate() {\r\n        return Array.from(this.techEmployeeRegistry.values()).sort((a,b)=>\r\n            a.datelindja!.getDay()-b.datelindja!.getDay());\r\n        \r\n    }\r\n\r\n    loadTechEmployees = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const TechEmployees = await agent.TechEmployees.list();\r\n                TechEmployees.forEach(TechEmployee => {\r\n                    this.setTechEmployee(TechEmployee);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n    \r\n    private setTechEmployee = (techEmployee: TechEmployee) => {\r\n        techEmployee.datelindja = new Date(techEmployee.datelindja!);\r\n        this.techEmployeeRegistry.set(techEmployee.id, techEmployee);\r\n    }\r\n\r\n    loadTechEmployee = async (id: string) => {\r\n        let techEmployee = this.getTechEmployee(id);\r\n        if (techEmployee) {\r\n            this.selectedTechEmployee = techEmployee;\r\n            return techEmployee;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                techEmployee = await agent.TechEmployees.details(id);\r\n                this.setTechEmployee(techEmployee);\r\n                runInAction(() => {\r\n                    this.selectedTechEmployee = techEmployee;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return techEmployee;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getTechEmployee = (id: string) => {\r\n        return this.techEmployeeRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createTechEmployee = async (TechEmployee: TechEmployee) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.TechEmployees.create(TechEmployee);\r\n            runInAction(() => {\r\n                this.techEmployeeRegistry.set(TechEmployee.id, TechEmployee);\r\n                this.selectedTechEmployee = TechEmployee;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateTechEmployee = async (TechEmployee: TechEmployee) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.TechEmployees.update(TechEmployee);\r\n            runInAction(() => {\r\n                this.techEmployeeRegistry.set(TechEmployee.id, TechEmployee);\r\n                this.selectedTechEmployee = TechEmployee;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteTechEmployee = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.TechEmployees.delete(id);\r\n            runInAction(() => {\r\n                this.techEmployeeRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n// function b(a: any, b: any) {\r\n//     throw new Error(\"Function not implemented.\");\r\n// }\r\n// function a(a: any, b: (a: any, b: any) => void) {\r\n//     throw new Error(\"Function not implemented.\");\r\n// }\r\n\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Surgery } from \"../models/surgery\";\r\n\r\nexport default class SurgeryStore {\r\n    surgeryRegistry = new Map<string, Surgery>();\r\n    selectedSurgery: Surgery | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get surgeriesByDate() {\r\n        return Array.from(this.surgeryRegistry.values())\r\n\r\n    }\r\n\r\n    loadSurgeries = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const surgeries = await agent.Surgeries.list();\r\n                surgeries.forEach(surgery => {\r\n                    this.setSurgery(surgery);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n       }\r\n    }\r\n\r\n    private setSurgery = (surgery: Surgery) => {\r\n        this.surgeryRegistry.set(surgery.Id, surgery);\r\n    }\r\n\r\n    loadSurgery = async (id: string) => {\r\n        let surgery = this.getSurgery(id);\r\n        if (surgery) {\r\n            this.selectedSurgery = surgery;\r\n            return surgery;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                surgery = await agent.Surgeries.details(id);\r\n                this.setSurgery(surgery);\r\n                runInAction(() => {\r\n                    this.selectedSurgery = surgery;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return surgery;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getSurgery = (id: string) => {\r\n        return this.surgeryRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createSurgery = async (surgery: Surgery) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Surgeries.create(surgery);\r\n            runInAction(() => {\r\n                this.surgeryRegistry.set(surgery.Id, surgery);\r\n                this.selectedSurgery = surgery;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateSurgery = async (surgery: Surgery) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Surgeries.update(surgery);\r\n            runInAction(() => {\r\n                this.surgeryRegistry.set(surgery.Id, surgery);\r\n                this.selectedSurgery = surgery;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteSurgery = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Surgeries.delete(id);\r\n            runInAction(() => {\r\n                this.surgeryRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Country } from \"../models/country\";\r\n\r\nexport default class CountryStore {\r\n    countryRegistry = new Map<string, Country>();\r\n    selectedCountry: Country | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get countriesByName() {\r\n        return Array.from(this.countryRegistry.values())\r\n    }\r\n\r\n    loadCountries = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const countries = await agent.Countries.list();\r\n                countries.forEach(country => {\r\n                    this.setCountry(country);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    private setCountry = (country: Country) => {\r\n        this.countryRegistry.set(country.Id, country);\r\n    }\r\n\r\n    loadCountry = async (id: string) => {\r\n        let country = this.getCountry(id);\r\n        if (country) {\r\n            this.selectedCountry = country;\r\n            return country;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                country = await agent.Countries.details(id);\r\n                this.setCountry(country);\r\n                runInAction(() => {\r\n                    this.selectedCountry = country;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return country;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCountry = (id: string) => {\r\n        return this.countryRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createCountry = async (country: Country) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Countries.create(country);\r\n            runInAction(() => {\r\n                this.countryRegistry.set(country.Id, country);\r\n                this.selectedCountry = country;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateCountry = async (country: Country) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Countries.update(country);\r\n            runInAction(() => {\r\n                this.countryRegistry.set(country.Id, country);\r\n                this.selectedCountry = country;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteCountry = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Countries.delete(id);\r\n            runInAction(() => {\r\n                this.countryRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n    }","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Termin } from \"../models/termin\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class TerminStore {\r\n    terminRegistry = new Map<string, Termin>();\r\n    selectedTermin: Termin | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get terminsByDate() {\r\n        return Array.from(this.terminRegistry.values()).sort((a, b) =>\r\n            a.terminTime!.getTime() - b.terminTime!.getTime());\r\n    }\r\n\r\n    loadTermins = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const termins = await agent.Termins.list();\r\n            termins.forEach(termin => {\r\n                    this.setTermin(termin);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    loadTermin = async (id: string) => {\r\n        let termin = this.getTermin(id);\r\n        if (termin) {\r\n            this.selectedTermin = termin;\r\n            return termin;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                termin = await agent.Termins.details(id);\r\n                this.setTermin(termin);\r\n                runInAction(() => {\r\n                    this.selectedTermin = termin;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return termin;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n        \r\n    private setTermin = (termin: Termin) => {\r\n        termin.terminTime = new Date(termin.terminTime!);\r\n        this.terminRegistry.set(termin.id, termin);\r\n    }\r\n\r\n    private getTermin = (id: string) => {\r\n        return this.terminRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createTermin = async (termin: Termin) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Termins.create(termin);\r\n            runInAction(() => {\r\n                this.terminRegistry.set(termin.id, termin);\r\n                this.selectedTermin = termin;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateTermin = async (termin: Termin) => {\r\n        try {\r\n            await agent.Termins.update(termin);\r\n            runInAction(() => {\r\n                if (termin.id) {\r\n                    let updatedTermin = {...this.getTermin(termin.id), ...termin}\r\n                    this.terminRegistry.set(termin.id, updatedTermin as Termin);\r\n                    this.selectedTermin = updatedTermin as Termin;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteTermin = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Termins.delete(id);\r\n            runInAction(() => {\r\n                this.terminRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    // updateAttendance = async () => {\r\n    //     const user = store.userStore.user;\r\n    //     this.loading = true;\r\n    //     try {\r\n    //         await agent.Departments.attend(this.selectedDepartment!.id);\r\n    //         runInAction(() => {\r\n    //             if (this.selectedDepartment?.isDoctor) {\r\n    //                 this.selectedDepartment.departmentAttendees = \r\n    //                     this.selectedDepartment.departmentAttendees?.filter(a => a.username !== user?.username);\r\n    //                 this.selectedDepartment.isDoctor = false;\r\n    //             } else {\r\n    //                 const departmentAttendee = new Profile(user!);\r\n    //                 this.selectedDepartment?.departmentAttendees?.push(departmentAttendee);\r\n    //                 this.selectedDepartment!.isDoctor = true;\r\n    //             }\r\n    //             this.departmentRegistry.set(this.selectedDepartment!.id, this.selectedDepartment!)\r\n    //         })\r\n    //     } catch (error) {\r\n    //         console.log(error);\r\n    //     } finally {\r\n    //         runInAction(() => this.loading = false);\r\n    //     }\r\n    // }\r\n\r\n    clearSelectedTermin = () => {\r\n        this.selectedTermin = undefined;\r\n    }\r\n\r\n    // Use this method at Termin crud Video 15.7\r\n    // cancelDepartmentToggle = async () => {\r\n    //     this.loading = true;\r\n    //     try {\r\n    //         await agent.Departments.attend(this.selectedDepartment!.id);\r\n    //         runInAction(() => {\r\n    //             this.selectedDepartment!.isCancelled = !this.selectedDepartment?.isCancelled;\r\n    //             this.departmentRegistry.set(this.selectedDepartment!.id, this.selectedDepartment!);\r\n    //         })\r\n    //     } catch (error) {\r\n    //         console.log(error);\r\n    //     } finally {\r\n    //         runInAction(() => this.loading = false);\r\n    //     }\r\n    // }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { BloodType } from \"../models/bloodTypes\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class BloodTypeStore {\r\n    bloodTypeRegistry = new Map<string, BloodType>();\r\n    selectedbloodType: BloodType | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get bloodByType() {\r\n        return Array.from(this.bloodTypeRegistry.values()).sort((a, b) => a.type > b.type ? 1:-1);\r\n    }\r\n\r\n    loadBloodTypes = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const types = await agent.BloodTypes.list();\r\n                types.forEach(bloodType => {\r\n                    this.setBloodType(bloodType);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    private setBloodType = (bloodType: BloodType) => {\r\n        this.bloodTypeRegistry.set(bloodType.type, bloodType);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { EmergencyDriver } from \"../models/emergencyDriver\";\r\n\r\nexport default class EmergencyDriverStore{\r\n    emergencyDriverRegistry = new Map<string, EmergencyDriver>();\r\n    selectedEmergencyDriver: EmergencyDriver | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial =false;\r\n\r\n\r\n    constructor () {\r\n        makeAutoObservable(this)\r\n\r\n    }\r\n\r\n    get emergencyDriversByDate(){\r\n        return Array.from(this.emergencyDriverRegistry.values()).sort((a, b) => \r\n             a.Dateofbirth!.getTime() - b.Dateofbirth!.getTime());   \r\n    }\r\n\r\n\r\n\r\n    loadEmergencyDrivers = async () => { \r\n        this.loadingInitial= true;\r\n        try{\r\n                const emergencyDrivers = await agent.EmergencyDrivers.list();\r\n                emergencyDrivers.forEach(emergencyDriver =>{\r\n                    this.setEmergencyDriver(emergencyDriver);\r\n                })\r\n                  this.setLoadingInitial(false);\r\n                }catch (error) {\r\n                  console.log(error);\r\n                  this.setLoadingInitial(false);   \r\n        }\r\n    }\r\n    \r\n    loadEmergencyDriver = async (id:string) => {\r\n        let emergencyDriver = this.getEmergencyDriver(id);\r\n        if(emergencyDriver) {\r\n            this.selectedEmergencyDriver = emergencyDriver;\r\n            return emergencyDriver;\r\n        }else {\r\n            this.loadingInitial = true;\r\n            try{\r\n                emergencyDriver = await agent.EmergencyDrivers.details(id);\r\n                this.setEmergencyDriver(emergencyDriver);\r\n                runInAction(() => {\r\n                    this.selectedEmergencyDriver= emergencyDriver;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return emergencyDriver;\r\n            }catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setEmergencyDriver = (emergencyDriver: EmergencyDriver) => {\r\n        emergencyDriver.Dateofbirth= new Date(emergencyDriver.Dateofbirth!);\r\n        this.emergencyDriverRegistry.set(emergencyDriver.Id, emergencyDriver);\r\n    }\r\n\r\n    private getEmergencyDriver = (id:string) =>{\r\n        return this.emergencyDriverRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n   \r\n    createEmergencyDriver = async (emergencyDriver: EmergencyDriver) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.EmergencyDrivers.create(emergencyDriver);\r\n            runInAction(() => {\r\n                this.emergencyDriverRegistry.set(emergencyDriver.Id, emergencyDriver);\r\n                this.selectedEmergencyDriver = emergencyDriver;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    updateEmergencyDriver = async (emergencyDriver : EmergencyDriver) => {\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.EmergencyDrivers.update(emergencyDriver);\r\n            runInAction(() => {\r\n                this.emergencyDriverRegistry.set(emergencyDriver.Id, emergencyDriver);\r\n                this.selectedEmergencyDriver = emergencyDriver;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n\r\n        }catch(error) {\r\n            console.log(error);\r\n            runInAction(() =>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteEmergencyDriver = async (id: string) =>{\r\n        this.loading = true;\r\n        try{\r\n              await agent.EmergencyDrivers.delete(id);\r\n              runInAction(() =>{\r\n                this.emergencyDriverRegistry.delete(id);\r\n                this.loading = false;\r\n              })\r\n        }catch(error) {\r\n            console.log(error);  \r\n            runInAction(()=>{\r\n                this.loading = false;\r\n\r\n            })\r\n        }\r\n    }\r\n   \r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Room } from \"../models/room\";\r\n\r\nexport default class RoomStore{\r\n    roomRegistry = new Map<string, Room>();\r\n    selectedRoom: Room | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial =false;\r\n\r\n\r\n    constructor () {\r\n        makeAutoObservable(this)\r\n\r\n    }\r\n\r\n    /*get doctorsByDate(){\r\n        return Array.from(this.doctorRegistry.values()).sort((a, b) => \r\n             a.dateofbirth!.getTime() - b.dateofbirth!.getTime());   \r\n    }*/\r\n\r\n    get roomsByDate() {\r\n        return Array.from(this.roomRegistry.values())\r\n    }\r\n\r\n\r\n\r\n    loadRooms = async () => { \r\n        this.loadingInitial= true;\r\n        try{\r\n                const rooms = await agent.Rooms.list();\r\n                rooms.forEach(room =>{\r\n                    this.setRoom(room);\r\n                })\r\n                  this.setLoadingInitial(false);\r\n                }catch (error) {\r\n                  console.log(error);\r\n                  this.setLoadingInitial(false);   \r\n        }\r\n    }\r\n    \r\n    loadRoom = async (id:string) => {\r\n        let room = this.getRoom(id);\r\n        if(room) {\r\n            this.selectedRoom = room;\r\n            return room;\r\n        }else {\r\n            this.loadingInitial = true;\r\n            try{\r\n                room = await agent.Rooms.details(id);\r\n                this.setRoom(room);\r\n                runInAction(() => {\r\n                    this.selectedRoom= room;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return room;\r\n            }catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n   private setRoom = (room: Room) => {\r\n       this.roomRegistry.set(room.id, room);\r\n   }\r\n\r\n    private getRoom = (id:string) =>{\r\n        return this.roomRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n   \r\n    createRoom = async (room: Room) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Rooms.create(room);\r\n            runInAction(() => {\r\n                this.roomRegistry.set(room.id, room);\r\n                this.selectedRoom = room;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    updateRoom = async (room : Room) => {\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Rooms.update(room);\r\n            runInAction(() => {\r\n                this.roomRegistry.set(room.id, room);\r\n                this.selectedRoom = room;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n\r\n        }catch(error) {\r\n            console.log(error);\r\n            runInAction(() =>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteRoom = async (id: string) =>{\r\n        this.loading = true;\r\n        try{\r\n              await agent.Rooms.delete(id);\r\n              runInAction(() =>{\r\n                this.roomRegistry.delete(id);\r\n                this.loading = false;\r\n              })\r\n        }catch(error) {\r\n            console.log(error);  \r\n            runInAction(()=>{\r\n                this.loading = false;\r\n\r\n            })\r\n        }\r\n    }\r\n   \r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Medicine } from \"../models/medicine\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class MedicineStore {\r\n    medicineRegistry = new Map<string, Medicine>();\r\n    selectedMedicine: Medicine | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get medicinesByName() {\r\n        return Array.from(this.medicineRegistry.values()).sort((a, b) => a.medicineName > b.medicineName ? 1:-1);\r\n    }\r\n\r\n    loadMedicines = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const medicines = await agent.Medicines.list();\r\n            medicines.forEach(medicine => {\r\n                    this.setMedicine(medicine);\r\n                })\r\n                this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    loadMedicine = async (id: string) => {\r\n        let medicine = this.getMedicine(id);\r\n        if (medicine) {\r\n            this.selectedMedicine = medicine;\r\n            return medicine;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                medicine = await agent.Medicines.details(id);\r\n                this.setMedicine(medicine);\r\n                runInAction(() => {\r\n                    this.selectedMedicine = medicine;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return medicine;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n        \r\n    private setMedicine = (medicine: Medicine) => {\r\n        this.medicineRegistry.set(medicine.id, medicine);\r\n    }\r\n\r\n    private getMedicine = (id: string) => {\r\n        return this.medicineRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createMedicine = async (medicine: Medicine) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Medicines.create(medicine);\r\n            runInAction(() => {\r\n                this.medicineRegistry.set(medicine.id, medicine);\r\n                this.selectedMedicine = medicine;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateMedicine = async (medicine: Medicine) => {\r\n        try {\r\n            await agent.Medicines.update(medicine);\r\n            runInAction(() => {\r\n                if (medicine.id) {\r\n                    let updatedMedicine = {...this.getMedicine(medicine.id), ...medicine}\r\n                    this.medicineRegistry.set(medicine.id, updatedMedicine as Medicine);\r\n                    this.selectedMedicine = updatedMedicine as Medicine;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteMedicine = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Medicines.delete(id);\r\n            runInAction(() => {\r\n                this.medicineRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    // updateAttendance = async () => {\r\n    //     const user = store.userStore.user;\r\n    //     this.loading = true;\r\n    //     try {\r\n    //         await agent.Departments.attend(this.selectedDepartment!.id);\r\n    //         runInAction(() => {\r\n    //             if (this.selectedDepartment?.isDoctor) {\r\n    //                 this.selectedDepartment.departmentAttendees = \r\n    //                     this.selectedDepartment.departmentAttendees?.filter(a => a.username !== user?.username);\r\n    //                 this.selectedDepartment.isDoctor = false;\r\n    //             } else {\r\n    //                 const departmentAttendee = new Profile(user!);\r\n    //                 this.selectedDepartment?.departmentAttendees?.push(departmentAttendee);\r\n    //                 this.selectedDepartment!.isDoctor = true;\r\n    //             }\r\n    //             this.departmentRegistry.set(this.selectedDepartment!.id, this.selectedDepartment!)\r\n    //         })\r\n    //     } catch (error) {\r\n    //         console.log(error);\r\n    //     } finally {\r\n    //         runInAction(() => this.loading = false);\r\n    //     }\r\n    // }\r\n\r\n    clearSelectedMedicine = () => {\r\n        this.selectedMedicine = undefined;\r\n    }\r\n\r\n    // Use this method at Termin crud Video 15.7\r\n    // cancelDepartmentToggle = async () => {\r\n    //     this.loading = true;\r\n    //     try {\r\n    //         await agent.Departments.attend(this.selectedDepartment!.id);\r\n    //         runInAction(() => {\r\n    //             this.selectedDepartment!.isCancelled = !this.selectedDepartment?.isCancelled;\r\n    //             this.departmentRegistry.set(this.selectedDepartment!.id, this.selectedDepartment!);\r\n    //         })\r\n    //     } catch (error) {\r\n    //         console.log(error);\r\n    //     } finally {\r\n    //         runInAction(() => this.loading = false);\r\n    //     }\r\n    // }\r\n}","import { createContext, useContext } from \"react\";\r\nimport DepartmentStore from \"./departmentStore\";\r\nimport ReceptionistStore from \"./receptionistStore\";\r\nimport NurseStore from \"./nurseStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport UserStore from \"./userStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport FarmacistStore from \"./farmacistStore\";\r\nimport TestStore from \"./testStore\";\r\nimport PatientStore from \"./patientStore\";\r\nimport CityStore from \"./cityStore\";\r\nimport TherapyStore from \"./therapyStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport DoctorStore from \"./doctorStore\";\r\nimport TechEmployeeStore from \"./techEmployeeStore\";\r\nimport SurgeryStore from \"./surgeryStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CountryStore from \"./countryStore\";\r\nimport TerminStore from \"./terminStore\";\r\nimport BloodTypeStore from \"./bloodTypeStore\";\r\nimport EmergencyDriverStore from \"./emergencyDriverStore\";\r\nimport RoomStore from \"./roomStore\";\r\nimport MedicineStore from \"./medicineStore\";\r\n\r\n\r\ninterface Store{\r\n    receptionistStore: ReceptionistStore;\r\n    departmentStore: DepartmentStore;\r\n    medicineStore: MedicineStore;\r\n    terminStore: TerminStore;\r\n    nurseStore: NurseStore;\r\n    farmacistStore: FarmacistStore;\r\n    testStore: TestStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n    patientStore : PatientStore;\r\n    cityStore : CityStore;\r\n    therapyStore : TherapyStore;\r\n    doctorStore : DoctorStore;\r\n    techEmployeeStore : TechEmployeeStore;\r\n    surgeryStore : SurgeryStore;\r\n    roomStore : RoomStore;\r\n    countryStore : CountryStore;\r\n    bloodTypeStore : BloodTypeStore;\r\n    emergencyDriverStore : EmergencyDriverStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    receptionistStore: new ReceptionistStore(),\r\n    departmentStore: new DepartmentStore(),\r\n    medicineStore: new MedicineStore(),\r\n    terminStore: new TerminStore(),\r\n    nurseStore: new NurseStore(),\r\n    farmacistStore: new FarmacistStore(),\r\n    testStore: new TestStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n    patientStore: new PatientStore(),\r\n    cityStore: new CityStore(),\r\n    therapyStore: new TherapyStore(),\r\n    doctorStore: new DoctorStore(),\r\n    techEmployeeStore : new TechEmployeeStore(),\r\n    surgeryStore: new SurgeryStore(),\r\n    roomStore: new RoomStore(),\r\n    countryStore: new CountryStore(),\r\n    bloodTypeStore: new BloodTypeStore(),\r\n    emergencyDriverStore: new EmergencyDriverStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n} ","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (departmentId: string) => {\r\n        if (store.departmentStore.selectedDepartment) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?departmentId=' + departmentId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.departmentId = store.departmentStore.selectedDepartment?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header>\r\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\r\n                    HMS\r\n                </Menu.Item>\r\n                {/* <Menu.Item as={NavLink} to='/departments' name='Department' />\r\n                <Menu.Item as={NavLink} to='/receptionists' name='Receptionist' />\r\n                <Menu.Item as={NavLink} to='/nurses' name='Nurse' />\r\n                <Menu.Item as={NavLink} to='/farmacists' name='Farmacist' />\r\n                <Menu.Item as={NavLink} to='/patients' name='Patient' />\r\n                <Menu.Item as={NavLink} to='/cities' name='City' />\r\n                <Menu.Item as={NavLink} to='/therapies' name='Therapy' />\r\n                <Menu.Item as={NavLink} to='/doctors' name='Doctor' />\r\n                <Menu.Item as={NavLink} to='/techEmployees' name='TechEmployee' />\r\n                <Menu.Item as={NavLink} to='/surgeries' name='Surgery' />\r\n                <Menu.Item as={NavLink} to='/countries' name='Country' /> */}\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Dropdown text='Cruds'>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/departments' name='Department' content='Department' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/termins' name='Termin' content='Appointment' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/medicines' name='Medicine' content='Medicine' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/receptionists' name='Receptionist' content='Receptionist' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/nurses' name='Nurse' content='Nurse' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink}  to='/farmacists' name='Farmacist' content='Farmacist' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink}  to='/patients' name='Patient' content='Patients' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink}to='/cities' name='City' content='City' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/therapies' name='Therapy' content='Therapy' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/doctors' name='Doctor' content='Doctor' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/techEmployees' name='TechEmployee' content='TechEmployee' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink}  to='/surgeries' name='Surgery' content='Surgery' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink}to='/countries' name='Country' content='Country' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/tests' name='Test' content='Test' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/bloodTypes' name='Blood Types' content='BloodType' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/emergencyDrivers' name='EmergencyDriver' content='EmergencyDriver' />\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n                {/* <Menu.Item as={NavLink} to='/rooms' name='Room' />\r\n                <Menu.Item as={NavLink} to='/countries' name='Country' /> */}\r\n\r\n                <Menu.Item>\r\n                    <Dropdown text='Create'>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createDepartment' content='Create Department' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createTermin' content='Create Appointment' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createMedicine' content='Create Medicine' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createReceptionist' content='Create Receptionist' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createNurse' content='Create Nurse' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createFarmacist' content='Create Farmacist' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createPatient' content='Create Patient' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createCity' content='Create City' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createTherapy' content='Create Therapy' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createDoctor' content='Create Doctor' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createTechEmployee' content='Create TechEmployee' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createSurgery' content='Create Surgery' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createRoom' content='Create Room' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createCountry' content='Create Country' />\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createEmergencyDriver' content='Create Emergency Driver' />\r\n                            </Dropdown.Item>\r\n                            {/* <Dropdown.Item>\r\n                                <Button fluid as={NavLink} to='/createTest' content='Create Test' />\r\n                            </Dropdown.Item> */}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n              <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to HMS' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n} ","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to HMS' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}) ","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    HMS\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to our Hospital!' />\r\n                        <Button as={Link} to='/departments' size='huge' inverted>\r\n                            Go to Departments!\r\n                        </Button>\r\n                        <Button as={Link} to='/termins' size='huge' inverted>\r\n                            Go to Appointments!\r\n                        </Button>\r\n                        <Button as={Link} to='/medicines' size='huge' inverted>\r\n                            Go to Medicines!\r\n                        </Button>\r\n                        <Button as={Link} to='/receptionists' size='huge' inverted>\r\n                            Go to Receptionists!\r\n                        </Button>\r\n                        <Button as={Link} to='/nurses' size='huge' inverted>\r\n                            Go to Nurses!\r\n                        </Button>\r\n                        <Button as={Link} to='/farmacists' size='huge' inverted>\r\n                            Go to Farmacists!\r\n                        </Button>\r\n                        <Button as={Link} to='/patients' size='huge' inverted>\r\n                            Go to Patients!\r\n                        </Button>\r\n                        <Button as={Link} to='/cities' size='huge' inverted>\r\n                            Go to Cities!\r\n                        </Button>\r\n                        <Button as={Link} to='/doctors' size='huge' inverted>\r\n                            Go to Doctors!\r\n                        </Button>\r\n                        <Button as={Link} to='/therapies' size='huge' inverted>\r\n                            Go to Therapies!\r\n                        </Button>\r\n                        <Button as={Link} to='/surgeries' size='huge' inverted>\r\n                            Go to Surgeries!\r\n                        </Button>\r\n                        <Button as={Link} to='/rooms' size='huge' inverted>\r\n                            Go to Rooms!\r\n                        </Button>\r\n                        <Button as={Link} to='/countries' size='huge' inverted>\r\n                            Go to Countries!\r\n                        </Button> <Button as={Link} to='/farmacists' size='huge' inverted>\r\n                            Go to Farmacists!\r\n                        </Button>\r\n                        <Button as={Link} to='/techEmployees' size='huge' inverted>\r\n                            Go to Tech Employees!\r\n                        </Button>\r\n                        \r\n                        <Button as={Link} to='/tests' size='huge' inverted>\r\n                            Go to Tests!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                        Login!\r\n                    </Button>\r\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                        Register!\r\n                    </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                20 followers\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    departmentAttendees: Profile[];\r\n}\r\n\r\nexport default observer(function DepartmentListItemAttendee({ departmentAttendees }: Props) {\r\n    return (\r\n        <List horizontal>\r\n            {departmentAttendees.map(departmentAttendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={departmentAttendee.username}\r\n                    trigger={\r\n                        <List.Item key={departmentAttendee.username} as={Link} to={`/profiles/${departmentAttendee.username}`}>\r\n                            <Image size=\"mini\" circular src={departmentAttendee.image || '/assets/user.png'} />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={departmentAttendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n            <List.Item>\r\n                {departmentAttendees.length} {departmentAttendees.length === 1 ? 'Doctor' : 'Doctors'} in this Department\r\n            </List.Item>\r\n        </List>\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Item, Segment } from 'semantic-ui-react';\r\nimport { Department } from '../../../app/models/department';\r\nimport DepartmentListItemAttendee from './DepartmentListItemAttendee';\r\n\r\ninterface Props {\r\n    department: Department;\r\n}\r\n\r\nexport default function DepartmentListItem({department}: Props) {\r\n\r\n    return (\r\n       <Segment.Group>\r\n           <Segment>\r\n               <Item.Group>\r\n                   <Item>\r\n                       <Item.Image size='tiny' src={`/assets/departmentImages/${department.departmentName}.jpg`} />\r\n                       <Item.Content>\r\n                            <Item.Header as={Link} to={`/departments/${department.id}`}>\r\n                                {department.departmentName}\r\n                            </Item.Header>\r\n                            <Item.Description>{department.departmentDescription}</Item.Description>\r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n           <Segment secondary>\r\n               <DepartmentListItemAttendee departmentAttendees={department.departmentAttendees!} />\r\n           </Segment>\r\n           <Segment clearing>\r\n               <Button \r\n                    as={Link}\r\n                    to={`/departments/${department.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n               />\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport DepartmentListItem from './DepartmentListItem';\r\n\r\nexport default observer(function DepartmentList() {\r\n\r\n    const {departmentStore} = useStore();\r\n    const {departmentsByName} = departmentStore\r\n\r\n    return ( //video 5.7\r\n        <>\r\n            {departmentsByName.map(department => (\r\n                <DepartmentListItem key={department.id} department={department} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport DepartmentFilters from './DepartmentFilters';\r\nimport DepartmentList from './DepartmentList';\r\n\r\nexport default observer(function DepartmentDashboard() {\r\n\r\n    const {departmentStore} = useStore();\r\n    const {loadDepartments, departmentRegistry} = departmentStore;\r\n\r\n    useEffect(() => {\r\n        if (departmentRegistry.size <= 1) loadDepartments();\r\n    }, [departmentRegistry.size, loadDepartments])\r\n\r\n    if (departmentStore.loadingInitial) return <LoadingComponent content='Loading departments...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='16'>\r\n                <DepartmentList />\r\n            </Grid.Column>\r\n            {/* <Grid.Column width='6'>\r\n                <DepartmentFilters />\r\n            </Grid.Column> */}\r\n        </Grid>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Button, Loader } from 'semantic-ui-react'\r\nimport MyTextArea from '../../../app/common/form/MyTextArea'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    departmentId: string;\r\n}\r\n\r\nexport default observer(function DepartmentDetailedChat({ departmentId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (departmentId) {\r\n            commentStore.createHubConnection(departmentId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, departmentId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this department</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }} >\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src='/assets/user.png' />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { Department } from '../../../app/models/department';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst departmentImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst departmentImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '2%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    department: Department\r\n}\r\n\r\nexport default observer (function DepartmentDetailedHeader({department}: Props) {\r\n    const {departmentStore: {updateAttendance, loading}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/departmentImages/${department.departmentName}.jpg`} fluid style={departmentImageStyle}/>\r\n                <Segment style={departmentImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={department.departmentName}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p style={{marginRight: 10}}>\r\n                                    {department.departmentDescription}\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {department.isHost ? (\r\n                    <Button as={Link} to={`/managedepartment/${department.id}`} color='orange' floated='right'>\r\n                        Manage Event\r\n                    </Button>\r\n                ) : department.isDoctor ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Department} from \"../../../app/models/department\";\r\n\r\ninterface Props {\r\n    department: Department\r\n}\r\n\r\nexport default observer(function DepartmentDetailedInfo({department}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{department.departmentDescription}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Department } from '../../../app/models/department'\r\n\r\ninterface Props {\r\n    department: Department;\r\n}\r\n\r\nexport default observer(function DepartmentDetailedSidebar({ department: {departmentAttendees, host} }: Props) {\r\n    if (!departmentAttendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {departmentAttendees.length} {departmentAttendees.length === 1 ? 'Doctor' : 'Doctors'} in this Department\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {departmentAttendees.map(departmentAttendee => (\r\n                        <Item style={{ position: 'relative' }} key={departmentAttendee.username} >\r\n                            {departmentAttendee.username === host?.username &&\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                                \r\n                            >\r\n                                Shef i departamentit\r\n                            </Label>}\r\n                            <Image size='tiny' src={departmentAttendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${departmentAttendee.username}`}>{departmentAttendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport DepartmentDetailedChat from './DepartmentDetailedChat';\r\nimport DepartmentDetailedHeader from './DepartmentDetailedHeader';\r\nimport DepartmentDetailedInfo from './DepartmentDetailedInfo';\r\nimport DepartmentDetailedSidebar from './DepartmentDetailedSidebar';\r\n\r\nexport default observer(function DepartmentDetails() {\r\n    const {departmentStore} = useStore();\r\n    const {selectedDepartment: department, loadDepartment, loadingInitial, clearSelectedDepartment} = departmentStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadDepartment(id);\r\n        return () => clearSelectedDepartment();\r\n    }, [id, loadDepartment, clearSelectedDepartment]);\r\n\r\n    if (loadingInitial || !department) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <DepartmentDetailedHeader department={department} />\r\n                <DepartmentDetailedInfo department={department} />\r\n                <DepartmentDetailedChat departmentId={department.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <DepartmentDetailedSidebar department={department} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n              <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport { DepartmentFormValues } from '../../../app/models/department';\r\n\r\nexport default observer(function DepartmentForm() {\r\n    const history = useHistory();\r\n    const { departmentStore } = useStore();\r\n    const { createDepartment, updateDepartment, loadDepartment, loadingInitial} = departmentStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [department, setDepartment] = useState<DepartmentFormValues>(new DepartmentFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        departmentName: Yup.string().required('The department name is required'),\r\n        departmentDescription: Yup.string().required('The department description is required')\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadDepartment(id).then(department => setDepartment(new DepartmentFormValues(department)))\r\n    }, [id, loadDepartment]);\r\n\r\n    function handleFormSubmit(department: DepartmentFormValues) {\r\n        if (!department.id) {\r\n            let newDepartment = {\r\n                ...department,\r\n                id: uuid()\r\n            };\r\n            createDepartment(newDepartment).then(() => history.push(`/departments/${newDepartment.id}`))\r\n        } else {\r\n            updateDepartment(department).then(() => history.push(`/departments/${department.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading department...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Department Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema={validationSchema}\r\n            enableReinitialize \r\n            initialValues={department} \r\n            onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='departmentName' placeholder='Name' />\r\n                        <MyTextArea rows={3} name='departmentDescription' placeholder='Description' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive type='submit' \r\n                            content='Submit' />\r\n                        <Button as={Link} to='/departments' floated='right' type='submit' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\n\r\nexport default function ReceptionistFilters() {\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item content='All Activites' />\r\n                <Menu.Item content=\"I'm going\" />\r\n                <Menu.Item content=\"I'm hosting\" />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar />\r\n        </>\r\n    )\r\n} ","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Segment } from 'semantic-ui-react';\r\nimport { Receptionist } from '../../../app/models/receptionist';\r\nimport { useStore } from '../../../app/stores/store';\r\n// import {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    receptionist: Receptionist\r\n}\r\n\r\nexport default function ReceptionistListItem({ receptionist }: Props) {\r\n\r\n    const { receptionistStore } = useStore();\r\n    const { deleteReceptionist, loading } = receptionistStore;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src='/assets/receptionistImages/receptionist.png' />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/receptionists/${receptionist.id}`}>\r\n                                {receptionist.username}\r\n                            </Item.Header>\r\n                            <Item.Description>Recepcionisti\r\n                            </Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {receptionist.dob} <br />\r\n                    {/* <Icon name='clock' /> {format(receptionist.dob!, 'dd MMM yyyy h:mm aa')} */}\r\n                    <Icon name='marker' /> {receptionist.department}\r\n                </span>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name='phone' /> {receptionist.phone}\r\n            </Segment>\r\n            <Segment>\r\n                <span>{receptionist.department}</span>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <Button\r\n                    as={Link}\r\n                    to={`#`}\r\n                    color='red'\r\n                    floated='right'\r\n                    content='Delete'\r\n                    onClick={() => deleteReceptionist(receptionist.id)}\r\n                    type='submit'\r\n                    disabled={loading}\r\n                />\r\n                <Button\r\n                    as={Link}\r\n                    to={`/receptionists/${receptionist.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport React from 'react';\r\nimport ReceptionistListItem from './ReceptionistListItem';\r\n\r\nexport default observer(function ReceptionistList() {\r\n\r\n    const { receptionistStore } = useStore();\r\n    const { receptionistsByDate } = receptionistStore;\r\n    // const { groupedReceptionists } = receptionistStore;\r\n\r\n    return (\r\n        <>\r\n            {/* {groupedReceptionists.map(([group, receptionists]) => (\r\n            <Fragment key={group}>\r\n                <Header sub color='teal'>\r\n                    {group}\r\n                </Header>\r\n                {receptionists.map(receptionist => (\r\n                    <ReceptionistListItem key={receptionist.id} receptionist={receptionist} />\r\n                ))}\r\n            </Fragment>\r\n        ))} */}\r\n\r\n            {receptionistsByDate.map(receptionist => (\r\n                <ReceptionistListItem key={receptionist.id}\r\n                 receptionist={receptionist} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ReceptionistFilters from './ReceptionistFilters';\r\nimport ReceptionistList from './ReceptionistList';\r\n\r\nexport default observer(function ReceptionistDashboard() {\r\n\r\n  const { receptionistStore } = useStore();\r\n  const { loadReceptionists, receptionistRegistry } = receptionistStore;\r\n\r\n\r\n  useEffect(() => {\r\n    if (receptionistRegistry.size <= 1) loadReceptionists();\r\n  }, [receptionistRegistry.size, loadReceptionists])\r\n\r\n\r\n  if (receptionistStore.loadingInitial) return <LoadingComponent content='Loading app' />\r\n\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Row columns={2}>\r\n        <Grid.Column>\r\n          <h2>Receptionists</h2>\r\n        </Grid.Column>\r\n        <Grid.Column>\r\n          <Button\r\n            as={Link}\r\n            to={`/createReceptionist`}\r\n            color='blue'\r\n            floated='right'\r\n            content='Add'\r\n          />\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n      <Grid.Column width='10'>\r\n        <ReceptionistList />\r\n      </Grid.Column>\r\n      <Grid.Column width='6'>\r\n        <ReceptionistFilters />\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport {Segment, Header, Comment, Form, Button} from 'semantic-ui-react'\r\n\r\nexport default observer(function ReceptionistDetailedChat() {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Matt</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>Today at 5:42PM</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>How artistic!</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Joe Henderson</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>5 days ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Dude, this is awesome. Thanks so much</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Form reply>\r\n                        <Form.TextArea/>\r\n                        <Button\r\n                            content='Add Reply'\r\n                            labelPosition='left'\r\n                            icon='edit'\r\n                            primary\r\n                        />\r\n                    </Form>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n}) ","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Receptionist } from \"../../../app/models/receptionist\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    receptionist: Receptionist\r\n}\r\n\r\nexport default observer(function ReceptionistDetailedInfo({ receptionist }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{receptionist.name}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {receptionist.dob}\r\n                            {/* {format(receptionist.dob!, 'dd MMM yyyy h:mm aa')} */}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{receptionist.email}, {receptionist.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nexport default observer(function ActivityDetailedSidebar () {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                3 People Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Bob</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport {Receptionist} from \"../../../app/models/receptionist\";\r\nimport {format} from 'date-fns';\r\n\r\nconst receptionistImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst receptionistImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    receptionist: Receptionist\r\n}\r\n\r\nexport default observer (function ReceptionistDetailedHeader({receptionist}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/receptionistImages/receptionist.png`} fluid style={receptionistImageStyle}/>\r\n                <Segment style={receptionistImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={receptionist.name}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{receptionist.dob}</p> \r\n                                <p>\r\n                                    Hosted by <strong>Bob</strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button color='teal'>Join Activity</Button>\r\n                <Button>Cancel attendance</Button>\r\n                <Button as={Link} to={`/managereceptionist/${receptionist.id}`} color='orange' floated='right'>\r\n                    Manage Event\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}) ","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ReceptionistDetailedChat from './ReceptionistDetailedChat';\r\nimport ReceptionistDetailedInfo from './ReceptionistDetailedInfo';\r\nimport ReceptionistDetailedSidebar from './ReceptionistDetailedSidebar';\r\nimport ReceptionistDetailedHeader from './ReceptionistDetailesHeader';\r\n\r\n\r\n\r\nexport default observer (function ReceptionistDetails() {\r\n\r\n    const {receptionistStore} = useStore();\r\n    const {selectedReceptionist: receptionist, loadReceptionist, loadingInitial} = receptionistStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadReceptionist(id);\r\n    },[id, loadReceptionist]);\r\n\r\n    if (loadingInitial || !receptionist ) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ReceptionistDetailedHeader receptionist={receptionist} />\r\n                <ReceptionistDetailedInfo receptionist={receptionist} />\r\n                <ReceptionistDetailedChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ReceptionistDetailedSidebar />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n} )","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { Receptionist } from '../../../app/models/receptionist';\r\n\r\n\r\nexport default observer(function ReceptionistForm() {\r\n    const history = useHistory();\r\n    const { receptionistStore } = useStore();\r\n    const { createReceptionist, updateReceptionist, loadReceptionist, loadingInitial } = receptionistStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [receptionist, setReceptionist] = useState<Receptionist>({\r\n        id: '',\r\n        name: '',\r\n        lastName: '',\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n        dob: null,\r\n        gender: '',\r\n        street_address: '',\r\n        city: '',\r\n        country: '',\r\n        postal_code: '',\r\n        phone: '',\r\n        department: ''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required('The receptionist name is required'),\r\n        lastname: Yup.string().required('The receptionist lastname is required'),\r\n        username: Yup.string().required('The receptionist username is required'),\r\n        password: Yup.string().required('Password is required'),\r\n        email: Yup.string().required('Email is required'),\r\n        dob: Yup.string().required('Date is required').nullable(),\r\n        gender: Yup.string().required('Gender is required'),\r\n        street_address: Yup.string().required('Addres is required is required'),\r\n        city: Yup.string().required('City is required'),\r\n        country: Yup.string().required('Country is required'),\r\n        postal_code: Yup.string().required(),\r\n        phone: Yup.string().required('Country is required'),\r\n        department: Yup.string().required('Country is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadReceptionist(id).then(receptionist => setReceptionist(receptionist!))\r\n    }, [id, loadReceptionist]);\r\n\r\n\r\n    function handleFormSubmit(receptionist: Receptionist) {\r\n        if (!receptionist.id) {\r\n            let newReceptionist = {\r\n                ...receptionist,\r\n                id: uuid()\r\n            };\r\n            createReceptionist(newReceptionist).then(() => history.push(`/receptionists/${newReceptionist.id}`))\r\n        } else {\r\n            updateReceptionist(receptionist).then(() => history.push(`/receptionists/${receptionist.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading receptionist ...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={receptionist}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='name' placeholder='Name' />\r\n                        <MyTextInput name='lastname' placeholder='Lastname' />\r\n                        <MyTextInput name='username' placeholder='Username' />\r\n                        <MyTextInput name='password' placeholder='Password' />\r\n                        <MyTextInput name='email' placeholder='Email' />\r\n                        <MyDateInput\r\n                            placeholderText='Date of birth'\r\n                            name='dob'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <MyTextInput placeholder='Gender' name='gender' />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='Addres' name='street_address' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Country' name='country' />\r\n                        <MyTextInput placeholder='PostalCode' name='postal_code' />\r\n                        <MyTextInput placeholder='Phone' name='phone' />\r\n                        <MyTextInput placeholder='Department' name='department' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right'\r\n                            positive type='submit' \r\n                            content='Submit' />\r\n                        <Button as={Link} to='/receptionists' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default function NurseFilters() {\r\n    const {nurseStore} = useStore();\r\n   \r\n    const{nurseRegistry} = nurseStore;\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%' }}>\r\n                <Header icon='filter' attached color='teal' content='Nurses' />\r\n                <Menu.Item content='Total nurses in hospital ' />\r\n                <Menu.Item content={nurseRegistry.size} />\r\n               \r\n\r\n            </Menu>\r\n            <Header />\r\n           \r\n        </>\r\n    )\r\n}","import format from 'date-fns/format';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Segment } from 'semantic-ui-react';\r\nimport { Nurse } from '../../../app/models/nurse';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\ninterface Props {\r\n    nurse: Nurse\r\n}\r\n\r\nexport default function NurseListItem({nurse}: Props) {\r\n    const {nurseStore} = useStore();\r\n    const{deleteNurse,  loading,} = nurseStore;\r\n  \r\n\r\n    return (\r\n       <Segment.Group>\r\n           \r\n           <Segment>\r\n             \r\n          \r\n               <Item.Group>\r\n                   <Item>\r\n                   <Item.Image src={`/assets/${nurse.gjinia}.png`} />\r\n\r\n                       <Item.Content>\r\n                            <Item.Header as={Link} to={`/nurses/${nurse.id}`}>\r\n                              <h1 >  {nurse.emri}   {nurse.mbiemri}</h1>\r\n                              <h2>  {nurse.department}</h2>\r\n                            </Item.Header>\r\n                        \r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n           <Segment>\r\n               <span>\r\n                   <Icon name='calendar'/> {format(nurse.datelindja!, 'dd MMM yyyy')}\r\n                   <br/>\r\n                   <Icon name='map marker' />{nurse.adresa}\r\n               </span>\r\n           </Segment>\r\n           <Segment clearing>\r\n               <Button \r\n                    as={Link}\r\n                    to={`/nurses/${nurse.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n               />\r\n                   <Button  onClick={() => {if(window.confirm('Delete the Nurse?')){deleteNurse(nurse.id)};}}  type='submit'  color='red' disabled={loading} content='Delete'/>\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport NurseListItem from './NurseListItem';\r\n\r\nexport default observer(function NurseList() {\r\n\r\n    const {nurseStore} = useStore();\r\n    const {nursesByDate} = nurseStore\r\n\r\n    return ( //video 5.7\r\n        <>\r\n            {nursesByDate.map(nurse => (\r\n                <NurseListItem key={nurse.id} nurse={nurse} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport NurseFilters from './NurseFilters';\r\nimport NurseList from './NurseList';\r\n\r\nexport default observer(function NurseDashboard() {\r\n\r\n    const {nurseStore} = useStore();\r\n    const {loadNurses, nurseRegistry} = nurseStore;\r\n\r\n    useEffect(() => {\r\n        if (nurseRegistry.size <= 1) loadNurses();\r\n    }, [nurseRegistry.size, loadNurses])\r\n\r\n    if (nurseStore.loadingInitial) return <LoadingComponent content='Loading app' />\r\n\r\n    return (\r\n        <Grid>\r\n       \r\n            <Grid.Column width='10'>\r\n                <NurseList />\r\n            </Grid.Column>\r\n            <Grid.Column width='5'>\r\n              <NurseFilters/>\r\n              <Button\r\n          as={Link}\r\n          to={`/createNurse`}\r\n          color='blue'\r\n           floated='right'\r\n          content='Add'\r\n        />\r\n            </Grid.Column>\r\n          \r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport {Segment, Header, Comment, Form, Button} from 'semantic-ui-react'\r\n\r\nexport default observer(function NurseDetailedChat() {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this nurse</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Matt</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>Today at 5:42PM</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Great service at this department!</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Joe Henderson</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>5 days ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Fort e mire mikpritja</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Form reply>\r\n                        <Form.TextArea/>\r\n                        <Button\r\n                            content='Add Reply'\r\n                            labelPosition='left'\r\n                            icon='edit'\r\n                            primary\r\n                        />\r\n                    </Form>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { Nurse } from '../../../app/models/nurse';\r\n\r\nconst nurseImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst nurseImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '50%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    nurse: Nurse\r\n}\r\n\r\nexport default observer (function NurseDetailedHeader({nurse}: Props) {\r\n    return (\r\n        \r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n            <Image src={`/assets/nursesImages/${nurse.emri}.jpg`} fluid style={nurseImageStyle } />\r\n                <Segment style={nurseImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={nurse.emri}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>\r\n                                    {format (nurse.datelindja!, 'dd MMM yyyy')}\r\n                                </p>\r\n                                <p>\r\n                                    Informata per infermieren\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {/* <Button color='teal'>Join Activity</Button>\r\n                <Button>Cancel attendance</Button> */}\r\n                <Button as={Link} to={`/managenurse/${nurse.id}`} color='orange' floated='right'>\r\n                    Edit nurse\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Nurse } from \"../../../app/models/nurse\";\r\n// import {Department} from \"../../../app/models/department\";\r\n\r\n interface Props {\r\n     nurse: Nurse;\r\n }\r\n\r\nexport default observer(function NurseDetailedInfo({nurse}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>Informata</p>\r\n                        <p><Icon name='calendar'/>{format(nurse.datelindja!, 'dd MMM yyyy')}</p>\r\n                        <p> <Icon name='map marker' />{nurse.adresa}</p>\r\n                        <p>Departamenti: {nurse.department}</p>\r\n                        <p>Qyteti: {nurse.qyteti}</p>\r\n                        <p>Email: {nurse.email}</p>\r\n                        <p>Paga {nurse.paga}</p>\r\n\r\n\r\n                        {/* <p>{department.description}</p> */}\r\n                    </Grid.Column>\r\n                    \r\n             \r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport NurseDetailedChat from './NurseDetailedChat';\r\nimport NurseDetailedHeader from './NurseDetailedHeader';\r\nimport NurseDetailedInfo from './NurseDetailedInfo';\r\nimport NurseDetailedSidebar from './NurseDetailedSidebar';\r\n\r\nexport default observer(function NurseDetails() {\r\n    const {nurseStore} = useStore();\r\n    const {selectedNurse: nurse, loadNurse, loadingInitial} = nurseStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadNurse(id);\r\n    }, [id, loadNurse]);\r\n\r\n    if (loadingInitial || !nurse) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n    \r\n            <Grid.Column width={12}>\r\n                \r\n                <NurseDetailedHeader nurse={nurse} />\r\n            \r\n                <NurseDetailedInfo nurse={nurse} />\r\n                <NurseDetailedChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                {/* <NurseDetailedSidebar /> */}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik,Form, Field} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\n\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { Nurse } from '../../../app/models/nurse';\r\n\r\n\r\nexport default observer(function NurseForm() {\r\n    const history = useHistory();\r\n    const {nurseStore,departmentStore,cityStore} = useStore();\r\n    const{createNurse, updateNurse, loading, loadNurse, loadingInitial} = nurseStore;\r\n \r\n    const{departmentRegistry, loadDepartments}=departmentStore;\r\n    let departments=[...departmentRegistry.values()];\r\n\r\n    const{cityRegistry}=cityStore;\r\n    let cities=[...cityRegistry.values()];\r\n    \r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [nurse, setNurse] = useState<Nurse>({\r\n        id: '',\r\n        emri: '',\r\n        mbiemri: '',\r\n        username: '',\r\n        datelindja: null,\r\n        adresa: '',\r\n        qyteti: '',\r\n        email: '',\r\n        gjinia: '',\r\n        paga:  0,\r\n        department:''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        emri: Yup.string().required(),\r\n        mbiemri: Yup.string().required(),\r\n        username: Yup.string().required(),\r\n        datelindja: Yup.string().required('Date is required!').nullable(),\r\n        adresa: Yup.string().required(),\r\n        qyteti: Yup.string().required(),\r\n        email: Yup.string().required(),\r\n        gjinia: Yup.string().required(),\r\n        paga: Yup.string().required(),\r\n        department: Yup.string().required()\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(id) loadNurse(id).then(nurse => setNurse(nurse!))\r\n        if(departmentRegistry.size<=1) loadDepartments();\r\n    },[id, loadNurse, departmentRegistry.size,loadDepartments]);\r\n\r\n\r\n    function handleFormSubmit(nurse:Nurse) {\r\n       if(nurse.id.length === 0){\r\n           let newNurse = {\r\n               ...nurse,\r\n               id: uuid()\r\n           };\r\n           createNurse(newNurse).then(() => history.push(`/nurses/${newNurse.id}`))\r\n       }else{\r\n           updateNurse(nurse).then(() => history.push(`/nurses/${nurse.id}`))\r\n       }\r\n    }\r\n\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading nurse ...' />\r\n   \r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Nurse Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema={validationSchema}\r\n             enableReinitialize\r\n             initialValues={nurse} onSubmit={values => handleFormSubmit(values)}>\r\n            {({handleSubmit, isValid,isSubmitting,dirty})=>(\r\n                \r\n                     <Form className='ui form' onSubmit={handleSubmit} autoComplete='on'>\r\n                        \r\n\r\n                   \r\n                     <MyTextInput name='emri' placeholder='Emri'/>\r\n                    \r\n              \r\n                     <MyTextInput placeholder='Mbiemri'  name='mbiemri' />\r\n                  \r\n                     <MyTextInput  placeholder='Email'  name='email' />\r\n                     <MyDateInput \r\n                     placeholderText='Datelindja'  \r\n                     name='datelindja' \r\n                   \r\n                     timeCaption='time'\r\n                     dateFormat='MMMM d, yyyy'\r\n                     \r\n                     />\r\n                     <MyTextInput placeholder='Nderrimi'  name='username' />\r\n\r\n                     <MyTextInput placeholder='Gjinia'  name='gjinia' />\r\n                     <MyTextInput placeholder='Paga'  name='paga'/>\r\n                     <Field as=\"select\" name=\"department\">\r\n                         {departments.map(dep=>\r\n                            <option key={dep.id} value={dep.departmentName}>{dep.departmentName}</option>\r\n                            )};\r\n                     </Field>\r\n                        \r\n\r\n            <Header content='Location Details' sub color='teal' />\r\n\r\n                     <MyTextInput placeholder='Adresa'  name='adresa' />\r\n                     <Field as=\"select\" name=\"qyteti\">\r\n                         {cities.map(city=>\r\n                            <option key={city.Id} value={city.CityName}>{city.CityName}</option>\r\n                            )};\r\n                     </Field>\r\n                     <Button \r\n                     disabled={isSubmitting || !dirty || !isValid}\r\n                     loading={loading} floated='right' positive type='submit' content='Submit' />\r\n                     <Button as={Link} to='/nurses' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n                \r\n            </Formik>\r\n           \r\n            \r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\n\r\nexport default function FarmacistFilters() {\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%' }}>\r\n                <Header icon='filter' attached color='teal' content='Farmacists' />\r\n                <Menu.Item content='All Farmacists' />\r\n                {/* <Menu.Item content=\"I'm going\" />\r\n                <Menu.Item content=\"I'm hosting\" /> */}\r\n            </Menu>\r\n            <Header />\r\n           \r\n        </>\r\n    )\r\n}","import format from 'date-fns/format';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Segment } from 'semantic-ui-react';\r\nimport { Farmacist } from '../../../app/models/farmacist';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    farmacist: Farmacist\r\n}\r\n\r\nexport default function FarmacistListItem({farmacist}: Props) {\r\n    const {farmacistStore} = useStore();\r\n    const{deleteFarmacist,  loading,} = farmacistStore;\r\n\r\n    return (\r\n       <Segment.Group>\r\n           \r\n           <Segment>\r\n          \r\n               <Item.Group>\r\n                   <Item>\r\n                       <Item.Image size='tiny' circular src='/assets/farmacistImages/F.png' />\r\n                       <Item.Content>\r\n                            <Item.Header as={Link} to={`/farmacists/${farmacist.id}`}>\r\n                                {farmacist.emri}\r\n                            </Item.Header>\r\n                            <Item.Description>Pershkrimi i farmacistit</Item.Description>\r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n           <Segment>\r\n               <span>\r\n                   <Icon name='calendar'/> {format(farmacist.dateOfJoining!, 'dd MMM yyyy')}\r\n               </span>\r\n           </Segment>\r\n           <Segment clearing>\r\n               <Button \r\n                    as={Link}\r\n                    to={`/farmacists/${farmacist.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n               />\r\n                   <Button onClick={() => {if(window.confirm('Delete the Farmacist?')){deleteFarmacist(farmacist.id)};}}  type='submit' color='red' disabled={loading} >Delete</Button>\r\n\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport FarmacistListItem from './FarmacistListItem';\r\n\r\nexport default observer(function FarmacistList() {\r\n\r\n    const {farmacistStore} = useStore();\r\n    const {farmacistsByDate} = farmacistStore\r\n\r\n    return ( //video 5.7\r\n        <>\r\n            {farmacistsByDate.map(farmacist => (\r\n                <FarmacistListItem key={farmacist.id} farmacist={farmacist} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport FarmacistFilters from './FarmacistFilters';\r\nimport FarmacistList from './FarmacistList';\r\n\r\nexport default observer(function FarmacistDashboard() {\r\n\r\n    const {farmacistStore} = useStore();\r\n    const {loadFarmacists, farmacistRegistry} = farmacistStore;\r\n\r\n    useEffect(() => {\r\n        if (farmacistRegistry.size <= 1) loadFarmacists();\r\n    }, [farmacistRegistry.size, loadFarmacists])\r\n\r\n    if (farmacistStore.loadingInitial) return <LoadingComponent content='Loading app' />\r\n\r\n    return (\r\n        <Grid>\r\n    \r\n            \r\n            <Grid.Column width='10'>\r\n                <FarmacistList />\r\n            </Grid.Column>\r\n            <Grid.Column width='5'>\r\n              <FarmacistFilters/>\r\n              <Button\r\n          as={Link}\r\n          to={`/createFarmacist`}\r\n          color='blue'\r\n           floated='right'\r\n          content='Add'\r\n        />\r\n            </Grid.Column>\r\n          \r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport {Segment, Header, Comment, Form, Button} from 'semantic-ui-react'\r\n\r\nexport default observer(function FarmacistDetailedChat() {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this Farmacist\r\n            \r\n                </Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Matt</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>Today at 5:42PM</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Great service at this department!</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Joe Henderson</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>5 days ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Fort e mire mikpritja</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Form reply>\r\n                        <Form.TextArea/>\r\n                        <Button\r\n                            content='Add Reply'\r\n                            labelPosition='left'\r\n                            icon='edit'\r\n                            primary\r\n                        />\r\n                    </Form>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { Farmacist } from '../../../app/models/farmacist';\r\n\r\nconst FarmacistImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst FarmacistImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    farmacist: Farmacist\r\n}\r\n\r\nexport default observer (function FarmacistDetailedHeader({farmacist}: Props) {\r\n    return (\r\n        \r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n            <Image src={`/assets/farmacistImages/${farmacist.emri}.png`} fluid style={FarmacistImageStyle } />\r\n                <Segment style={FarmacistImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                   \r\n\r\n                                      \r\n                                    style={{color: 'white'}}\r\n                                >{farmacist.emri} {farmacist.mbiemri}</Header>\r\n                                \r\n                               \r\n                                   <p>\r\n                                    Filloje punen me daten:\r\n                                </p>\r\n                                <p>\r\n                                    {format (farmacist.dateOfJoining!, 'dd MMM yyyy')}\r\n                                </p>\r\n                             \r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {/* <Button color='teal'>Join Activity</Button>\r\n                <Button>Cancel attendance</Button> */}\r\n                <Button as={Link} to={`/managefarmacist/${farmacist.id}`} color='orange' floated='right'>\r\n                    Edit farmacist\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Farmacist } from \"../../../app/models/farmacist\";\r\n\r\n\r\n interface Props {\r\n     farmacist: Farmacist;\r\n }\r\n\r\nexport default observer(function FarmacistDetailedInfo({farmacist}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={10}>\r\n                        <p>Informata</p>\r\n                        <p><Icon name='calendar'/>{format(farmacist.dateOfJoining!, 'dd MMM yyyy')}</p>\r\n                        <p> Shkollimi:{farmacist.degree}</p>\r\n                        <p> Email:{farmacist.email}</p>\r\n                        <p> Tel:{farmacist.tel}</p>\r\n\r\n                        {/* <p>{department.description}</p> */}\r\n                    </Grid.Column>\r\n                    \r\n             \r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport FarmacistDetailedChat from './FarmacistDetailedChat';\r\nimport FarmacistDetailedHeader from './FarmacistDetailedHeader';\r\nimport FarmacistDetailedInfo from './FarmacistDetailedInfo';\r\n\r\nexport default observer(function FarmacistDetails() {\r\n    const {farmacistStore} = useStore();\r\n    const {selectedFarmacist: farmacist, loadFarmacist, loadingInitial} = farmacistStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadFarmacist(id);\r\n    }, [id, loadFarmacist]);\r\n\r\n    if (loadingInitial || !farmacist) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n    \r\n            <Grid.Column width={15}>\r\n                \r\n                <FarmacistDetailedHeader farmacist={farmacist} />\r\n            \r\n                <FarmacistDetailedInfo farmacist={farmacist} />\r\n                <FarmacistDetailedChat />\r\n            </Grid.Column>\r\n            {/* <Grid.Column width={6}>\r\n                <FarmacistDetailedSidebar />\r\n            </Grid.Column> */}\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik,Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { Farmacist } from '../../../app/models/farmacist';\r\n\r\n\r\nexport default observer(function FarmacistForm() {\r\n    const history = useHistory();\r\n    const {farmacistStore} = useStore();\r\n    const{createFarmacist, updateFarmacist, loading, loadFarmacist, loadingInitial} = farmacistStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [farmacist, setFarmacist] = useState<Farmacist>({\r\n        id: '',\r\n        emri: '',\r\n        mbiemri: '',\r\n        dateOfJoining: null,\r\n        email: '',\r\n        tel: 0,\r\n        degree: ''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        emri: Yup.string().required(),\r\n        mbiemri: Yup.string().required(),\r\n        dateOfJoining: Yup.string().required('Date is required!').nullable(),\r\n        email: Yup.string().required(),\r\n        degree: Yup.string().required(),\r\n        tel: Yup.string().required()\r\n        \r\n  \r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(id) loadFarmacist(id).then(farmacist => setFarmacist(farmacist!))\r\n    },[id, loadFarmacist]);\r\n\r\n\r\n    function handleFormSubmit(farmacist:Farmacist) {\r\n       if(farmacist.id.length === 0){\r\n           let newFarmacist = {\r\n               ...farmacist,\r\n               id: uuid()\r\n           };\r\n           createFarmacist(newFarmacist).then(() => history.push(`/farmacists/${newFarmacist.id}`))\r\n       }else{\r\n           updateFarmacist(farmacist).then(() => history.push(`/farmacists/${farmacist.id}`))\r\n       }\r\n    }\r\n\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading Farmacist ...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Farmacist Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema={validationSchema}\r\n             enableReinitialize\r\n             initialValues={farmacist} onSubmit={values => handleFormSubmit(values)}>\r\n            {({handleSubmit, isValid,isSubmitting,dirty})=>(\r\n                     <Form className='ui form' onSubmit={handleSubmit} autoComplete='on'>\r\n                        \r\n\r\n                   \r\n                     <MyTextInput name='emri' placeholder='Emri'/>\r\n\r\n                   \r\n                     <MyTextInput placeholder='Mbiemri'  name='mbiemri' />\r\n                  \r\n                     <MyTextInput  placeholder='Email'  name='email' />\r\n                     <MyDateInput \r\n                     placeholderText='DateOfJoining'  \r\n                     name='dateOfJoining'                  \r\n                     timeCaption='time'\r\n                     dateFormat='MMMM d, yyyy'\r\n                     \r\n                     />\r\n                     <MyTextInput placeholder='Degree'  name='degree' />\r\n                     <MyTextInput placeholder='Tel'  name='tel'/>\r\n                     <Button \r\n                     disabled={isSubmitting || !dirty || !isValid}\r\n                     loading={loading} floated='right' positive type='submit' content='Submit' />\r\n                     <Button as={Link} to='/farmacists' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n                \r\n            </Formik>\r\n           \r\n            \r\n        </Segment>\r\n    )\r\n})","import { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Segment } from \"semantic-ui-react\";\r\nimport { Patient } from \"../../../app/models/patient\";\r\nimport React from 'react';\r\nimport {format} from 'date-fns';\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface Props {\r\n    patient : Patient\r\n}\r\n\r\nexport default function PatientListItem({patient}: Props){\r\n    const {patientStore} = useStore();\r\n    const{deletePatient,  loading,} = patientStore;\r\n\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src='/assets/patient.png' />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/patients/${patient.id}`} >\r\n                                {patient.name}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted By HMS</Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(patient.register_date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon  marker='marker'/>{patient.gender}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                Attendies go here/Doctors in the case\r\n            </Segment>\r\n            <Segment clearing>\r\n             \r\n                <Button \r\n                    as={Link}\r\n                    to={`/patients/${patient.id}`}\r\n                    color='teal'\r\n                    floated= 'right'\r\n                    content= 'View'\r\n                />\r\n                   <Button  onClick={() => {if(window.confirm('Delete the Patient?')){deletePatient(patient.id)};}}  type='submit'  color='red' disabled={loading} content='Delete'/>\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Item, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport PatientListItem from './PatientListItem';\r\n\r\n\r\nexport default observer( function PatientList(){\r\n    const {patientStore} = useStore();\r\n    const{patientsByDate} = patientStore;\r\n\r\n    return (\r\n           <Segment>\r\n            <Item.Group divided>\r\n                {patientsByDate.map(patient =>(\r\n                    <PatientListItem key={patient.id} patient={patient} />\r\n                ))}\r\n\r\n            </Item.Group>\r\n        </Segment>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\n\r\n\r\nexport default function PatientFilters() {\r\n    return(\r\n        <>\r\n                <Menu vertical size='large' style={{width: '100%' }} >\r\n            <Header icon='filter' attached color='teal' content='Patients' />\r\n            <Menu.Item content='All Patients' />\r\n           \r\n        </Menu>\r\n        <Header />\r\n     \r\n        </>\r\n\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport PatientList from './PatientList';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport PatientFilters from './PatientFilters';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default observer(function PatientDashboard(){\r\n    const {patientStore} =useStore();     \r\n    const {loadPatients, patientRegistry} = patientStore;  \r\n\r\n        useEffect(() => {\r\n         if (patientRegistry.size <= 1) loadPatients();\r\n            }, [patientRegistry.size, loadPatients])\r\n\r\n    if(patientStore.loadingInitial) return <LoadingComponent content ='Loading patients...'/>\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width ='10'>\r\n              <PatientList />\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <PatientFilters />\r\n                <Button\r\n          as={Link}\r\n          to={`/createPatient`}\r\n          color='blue'\r\n           floated='right'\r\n          content='Add'\r\n        />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport {Segment, Header, Comment, Form, Button} from 'semantic-ui-react'\r\n\r\nexport default observer(function PatientDetailedChat() {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Notes about the patient</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Matt</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>Today at 5:42PM</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>A dose of penicilin!</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Joe Henderson</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>5 days ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>chemo</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Form reply>\r\n                        <Form.TextArea/>\r\n                        <Button\r\n                            content='Add Reply'\r\n                            labelPosition='left'\r\n                            icon='edit'\r\n                            primary\r\n                        />\r\n                    </Form>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { Patient } from '../../../app/models/patient';\r\n\r\nconst patientImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst patientImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    patient: Patient\r\n}\r\n\r\nexport default observer (function PatientDetailedHeader({patient: Patient}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/user.png`} fluid style={patientImageStyle}/>\r\n                <Segment style={patientImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={Patient.name}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(Patient.dateofbirth!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>HMS</strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button color='teal'>Join Case</Button>\r\n                <Button as={Link} to='/patients' color='orange' floated='right'>\r\n                    Cancel\r\n                </Button>\r\n                <Button as={Link} to={`/managepatient/${Patient.id}`} color='orange' floated='right'>\r\n                    Manage Patient\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Patient } from '../../../app/models/patient';\r\n\r\ninterface Props {\r\n    patient: Patient\r\n}\r\n\r\nexport default observer(function PatientDetailedInfo({patient}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{patient.other_det}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(patient.register_date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{patient.street_address}, {patient.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nexport default observer(function PatientDetailedSidebar () {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                3 People in this Case\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Bob</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Doctor</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Nurse</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport PatientDetailedChat from './PatientDetailedChat';\r\nimport PatientDetailedHeader from './PatientDetailedHeader';\r\nimport PatientDetailedInfo from './PatientDetailedInfo';\r\nimport PatientDetailedSidebar from './PatientDetailedSidebar';\r\n\r\n\r\n\r\nexport default observer( function PatientDetails(){\r\n   const{patientStore} = useStore();\r\n   const {selectedPatient: patient,loadPatient, loadingInitial} = patientStore;\r\n   const {id} = useParams<{id:string}>();\r\n\r\n   useEffect(() => {\r\n     if (id) loadPatient(id);\r\n   }, [id, loadPatient]);\r\n\r\n   if(loadingInitial || !patient) return <LoadingComponent />;\r\n\r\n    return(\r\n          <Grid>\r\n            <Grid.Column width={10}>\r\n              <PatientDetailedHeader patient={patient} />\r\n              <PatientDetailedInfo patient={patient} />\r\n              <PatientDetailedChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6} >\r\n              <PatientDetailedSidebar />\r\n            </Grid.Column>\r\n          </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { Patient } from '../../../app/models/patient';\r\n\r\n\r\nexport default observer(function PatientForm(){\r\n    const history = useHistory();\r\n    const { patientStore, bloodTypeStore } = useStore();\r\n    const { createPatient, updatePatient, \r\n            loading, loadPatient, loadingInitial } = patientStore;\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    const{bloodTypeRegistry, loadBloodTypes}=bloodTypeStore;\r\n    let bloodtypes=[...bloodTypeRegistry.values()];\r\n\r\n    const [patient, setPatient] = useState<Patient>({ //\r\n        id: '',\r\n        name: '',\r\n        surname: '',\r\n        dateofbirth: null,\r\n        gender: '',\r\n        street_address: '',\r\n        city: '',\r\n        country: '',\r\n        postal_code: '',\r\n        phone: '',\r\n        weight: '',\r\n        other_det: '',\r\n        register_date: null\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required('The patient name is required'),\r\n        surname: Yup.string().required('The patient surname is required'),\r\n        dateofbirth: Yup.string().required(\"The Date of Birth is required\").nullable(),\r\n        gender: Yup.string().required(),\r\n        street_address: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n        country: Yup.string().required(),\r\n        postal_code: Yup.string().required(),\r\n        phone: Yup.string().required(),\r\n        weight: Yup.string().required(),\r\n        other_det: Yup.string().required(),\r\n        register_date: Yup.string().required('The Register Date is required').nullable(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadPatient(id).then(patient => setPatient(patient!))\r\n        if(bloodTypeRegistry.size<=1) loadBloodTypes();\r\n    }, [id, loadPatient, bloodTypeRegistry.size,loadBloodTypes]);\r\n\r\n      function handleFormSubmit(patient: Patient){\r\n       if (patient.id.length === 0 ) {\r\n           let newPatient ={\r\n               ...patient,\r\n               id:uuid()\r\n           };\r\n           createPatient(newPatient).then(() => history.push(`/patients/${newPatient.id}`))\r\n       }else{\r\n           updatePatient(patient).then(() => history.push(`/patients/${patient.id}`))\r\n       }\r\n    }\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading patient...' />\r\n\r\n    return(\r\n        <Segment clearing>\r\n            <Header content='Patient Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema ={validationSchema}\r\n            enableReinitialize \r\n            initialValues={patient} \r\n            onSubmit={values => handleFormSubmit(values)} >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <MyTextInput name='name' placeholder='Name' />\r\n                    <MyTextInput placeholder ='surname'   name='surname' />\r\n                    <MyDateInput\r\n                        placeholderText ='dateofbirth' \r\n                        name='dateofbirth'\r\n                    />\r\n                    <MyTextInput placeholder ='gender'    name='gender'  />\r\n                    <MyTextInput placeholder ='street_address' name='street_address'  />\r\n                    <MyTextInput placeholder ='city'    name='city'  />\r\n                    <MyTextInput placeholder ='country'  name='country'  />\r\n                    <MyTextInput placeholder ='postal_code' name='postal_code'  />\r\n                    <MyTextInput placeholder ='phone'   name='phone' />\r\n                    <MyTextInput placeholder ='weight'   name='weight' />\r\n                    <Field as=\"select\" name=\"other_det\">\r\n                         {bloodtypes.map(type=>\r\n                            <option key={type.id} value={type.type}>{type.type}</option>\r\n                            )};\r\n                     </Field>\r\n                     <br />\r\n                    <MyDateInput\r\n                    placeholderText ='register_date' \r\n                    name='register_date'\r\n                    showTimeSelect\r\n                    timeCaption='time'\r\n                    dateFormat='MMMM d, yyyy h:mm aa'\r\n                    />\r\n                    <Button \r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} \r\n                        floated = 'right'\r\n                        positive type='submit' \r\n                        content='Submit' />\r\n                    <Button as={Link} to='/patients' floated = 'right'  type='button' content='Cancel' />  \r\n                </Form>                 \r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\n\r\nexport default function CityFilters() {\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%' }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item content='All Cities' />\r\n                <Menu.Item content=\"I'm going\" />\r\n                <Menu.Item content=\"I'm hosting\" />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar />\r\n        </>\r\n    )\r\n} ","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Segment } from 'semantic-ui-react';\r\nimport { City } from '../../../app/models/city';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    city: City\r\n}\r\n\r\nexport default function FarmacistListItem({ city }: Props) {\r\n    const { cityStore } = useStore();\r\n    const { deleteCity, loading } = cityStore;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src='/assets/cityImages/Prizren.png' />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/cityImages/${city.Id}`}>\r\n                                {city.CityName} \r\n                            </Item.Header>\r\n                            <Item.Description>City</Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='marker' /> {city.ZipCode}\r\n                </span>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <Button\r\n                    as={Link}\r\n                    to={`#`}\r\n                    color='red'\r\n                    floated='right'\r\n                    content='Delete'\r\n                    onClick={() => deleteCity(city.Id)}\r\n                    type='submit'\r\n                    disabled={loading}\r\n                />\r\n                <Button\r\n                    as={Link}\r\n                    to={`/cities/${city.Id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport CityListItem from './CityListItem';\r\n\r\nexport default observer(function FarmacistList() {\r\n\r\n    const {cityStore} = useStore();\r\n    const {citiesByName} = cityStore\r\n\r\n    return ( \r\n        <>\r\n            {citiesByName.map(city => (\r\n                <CityListItem key={city.Id} city={city} />\r\n            ))}\r\n        </>\r\n    )\r\n}) ","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport CityFilters from './CityFilters';\r\nimport CityList from './CityList';\r\n\r\nexport default observer(function CityDashboard() {\r\n\r\n    const { cityStore } = useStore();\r\n    const { loadCities, cityRegistry } = cityStore;\r\n\r\n    useEffect(() => {\r\n        if (cityRegistry.size <= 1) loadCities();\r\n    }, [cityRegistry.size, loadCities])\r\n\r\n    if (cityStore.loadingInitial) return <LoadingComponent content='Loading cities...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Row columns={2}>\r\n                <Grid.Column>\r\n                    <h2>Cities</h2>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Button\r\n                        as={Link}\r\n                        to={`/createCity`}\r\n                        color='blue'\r\n                        floated='right'\r\n                        content='Add'\r\n                    />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Column width='10'>\r\n                <CityList />\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <CityFilters />\r\n            </Grid.Column>\r\n\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport {Segment, Header, Comment, Form, Button} from 'semantic-ui-react'\r\n\r\nexport default observer(function CityDetailedChat() {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this City\r\n\r\n                </Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Matt</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>Today at 5:42PM</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Beautiful City!</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Joe Henderson</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>5 days ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Great...</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Form reply>\r\n                        <Form.TextArea/>\r\n                        <Button\r\n                            content='Add Reply'\r\n                            labelPosition='left'\r\n                            icon='edit'\r\n                            primary\r\n                        />\r\n                    </Form>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n}) ","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { City } from '../../../app/models/city';\r\n\r\nconst CityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst CityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    city: City\r\n}\r\n\r\nexport default observer (function CityDetailedHeader({city}: Props) {\r\n    return (\r\n\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n            <Image src={`/assets/cities/${city.CityName}.png`} fluid style={CityImageStyle } />\r\n                <Segment style={CityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={city.CityName}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button color='teal'>Join</Button>\r\n                <Button>Cancel </Button>\r\n                <Button as={Link} to={`/managecity/${city.Id}`} color='orange' floated='right'>\r\n                    Manage City\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}) ","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { City } from \"../../../app/models/city\";\r\n\r\n\r\n interface Props {\r\n     city: City;\r\n }\r\n\r\nexport default observer(function CityDetailedInfo({city}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        {city.CityName}\r\n                        <p>Pershkrimi i qytetit</p>\r\n                        <p> <Icon  />{city.ZipCode}</p>\r\n                    </Grid.Column>\r\n\r\n\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}) ","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nexport default observer(function CityDetailedSidebar () {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                3 People Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Bob</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n}) ","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport CityDetailedChat from './CityDetailedChat';\r\nimport CityDetailedHeader from './CityDetailedHeader';\r\nimport CityDetailedInfo from './CityDetailedInfo';\r\nimport CityDetailedSidebar from './CityDetailedSidebar';\r\n\r\nexport default observer(function CityDetails() {\r\n    const {cityStore} = useStore();\r\n    const {selectedCity: city, loadCity, loadingInitial} = cityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadCity(id);\r\n    }, [id, loadCity]);\r\n\r\n    if (loadingInitial || !city) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <CityDetailedHeader city={city} />\r\n                <CityDetailedInfo city={city} />\r\n                <CityDetailedChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <CityDetailedSidebar />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}) ","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik,Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport { City } from '../../../app/models/city';\r\n\r\n\r\nexport default observer(function CityForm() {\r\n    const history = useHistory();\r\n    const {cityStore} = useStore();\r\n    const{createCity, updateCity, loading, loadCity, loadingInitial} = cityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [city, setCity] = useState<City>({\r\n        Id: '',\r\n        CityName: '',\r\n        ZipCode: '',\r\n        \r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        CityName: Yup.string().required('CityName is required!'),\r\n        ZipCode: Yup.string().required('Zip Code is required!')\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(id) loadCity(id).then(city => setCity(city!))\r\n    },[id, loadCity]);\r\n\r\n\r\n    function handleFormSubmit(city:City) {\r\n       if(!city.Id){\r\n           let newCity = {\r\n               ...city,\r\n               id: uuid()\r\n           };\r\n           createCity(newCity).then(() => history.push(`/cities/${newCity.Id}`))\r\n       }else{\r\n           updateCity(city).then(() => history.push(`/cities/${city.Id}`))\r\n       }\r\n    }\r\n\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading City ...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='City Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema={validationSchema}\r\n             enableReinitialize\r\n             initialValues={city} \r\n             onSubmit={values => handleFormSubmit(values)}>\r\n            {({handleSubmit, isValid,isSubmitting,dirty})=>(\r\n                     <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n\r\n                     <MyTextInput name='CityName' placeholder='CityName'/>\r\n\r\n                     <MyTextInput placeholder='ZipCode'  name='Zip Code' />\r\n\r\n                     <Button \r\n                     disabled={isSubmitting || !dirty || !isValid}\r\n                     loading={isSubmitting} \r\n                     floated='right' \r\n                     positive type='submit' \r\n                     content='Submit' />\r\n                     <Button as={Link} to='/cities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n\r\n            </Formik>\r\n\r\n\r\n        </Segment>\r\n    )\r\n}) ","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuidDepartment() {\r\n        axios.get(baseUrl + 'departments/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationErrorDepartment() {\r\n        axios.post(baseUrl + 'departments', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    function handleBadGuidTermin() {\r\n        axios.get(baseUrl + 'termins/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationErrorTermin() {\r\n        axios.post(baseUrl + 'termins', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    function handleBadGuidMedicine() {\r\n        axios.get(baseUrl + 'medicines/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationErrorMedicine() {\r\n        axios.post(baseUrl + 'medicines', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n   \r\n\r\n    function handleBadGuidNurse() {\r\n        axios.get(baseUrl + 'nurses/notaguid').catch(err => console.log(err));\r\n        axios.get(baseUrl + 'farmacists/notaguid').catch(err => console.log(err));\r\n        axios.get(baseUrl + 'bloodtypes/notaguid').catch(err => console.log(err));\r\n        axios.get(baseUrl + 'techEmployees/notaguid').catch(err => console.log(err));\r\n        axios.get(baseUrl + 'tests/notaguid').catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    function handleBadGuidReceptionist() {\r\n        axios.get(baseUrl + 'receptionists/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationErrorReceptionist() {\r\n        axios.post(baseUrl + 'receptionists', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    function handleBadGuidCity() {\r\n        axios.get(baseUrl + 'cities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationErrorCity() {\r\n        axios.post(baseUrl + 'cities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n\r\n    function handleValidationErrorNurse() {\r\n        axios.post(baseUrl + 'nurses', {}).catch(err => setErrors(err));\r\n        axios.post(baseUrl + 'farmacists', {}).catch(err => setErrors(err));\r\n        axios.post(baseUrl + 'bloodtypes', {}).catch(err => setErrors(err));\r\n        axios.post(baseUrl + 'techEmployees', {}).catch(err => setErrors(err));\r\n        axios.post(baseUrl + 'tests', {}).catch(err => setErrors(err));\r\n\r\n    }\r\n    function handleBadGuidPatient() {\r\n        axios.get(baseUrl + 'patients/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationErrorPatient() {\r\n        axios.post(baseUrl + 'patients', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    function handleBadGuidDoctor() {\r\n        axios.get(baseUrl + 'doctors/notaguid').catch(err => console.log(err));\r\n        axios.get(baseUrl + 'doctors/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationErrorDoctor() {\r\n        axios.post(baseUrl + 'doctors', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    function handleBadGuidRoom() {\r\n        axios.get(baseUrl + 'rooms/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationErrorRoom() {\r\n        axios.post(baseUrl + 'rooms', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    function handleBadGuidTherapy() {\r\n        axios.get(baseUrl + 'therapies/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationErrorTherapy() {\r\n        axios.post(baseUrl + 'therapies', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    function handleBadGuidCountry() {\r\n        axios.get(baseUrl + 'countries/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationErrorCountry() {\r\n        axios.post(baseUrl + 'countries', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    function handleBadGuidEmergencyDriver() {\r\n        axios.get(baseUrl + 'emergencyDrivers/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationErrorEmergencyDriver() {\r\n        axios.post(baseUrl + 'emergencyDrivers', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='16'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationErrorDepartment} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorTermin} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorMedicine} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorReceptionist} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorNurse} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorPatient} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorCity} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorDoctor} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorRoom} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorTherapy} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorCountry} content='Validation Error' basic primary />\r\n                    <Button onClick={handleValidationErrorEmergencyDriver} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuidDepartment} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidTermin} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidMedicine} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidReceptionist} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidNurse} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidPatient} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidCity} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidDoctor} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidRoom} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidTherapy} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidCountry} content='Bad Guid' basic primary />\r\n                    <Button onClick={handleBadGuidEmergencyDriver} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n}) ","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/departments' primary>\r\n                    Return to departments page\r\n                </Button>\r\n                <Button as={Link} to='/termins' primary>\r\n                    Return to appointments page\r\n                </Button>\r\n                <Button as={Link} to='/medicines' primary>\r\n                    Return to medicines page\r\n                </Button>\r\n                <Button as={Link} to='/receptionists' primary>\r\n                    Return to receptionists page\r\n                </Button>\r\n                <Button as={Link} to='/nurses' primary>\r\n                    Return to nurses page\r\n                </Button>\r\n                <Button as={Link} to='/farmacists' primary>\r\n                    Return to farmacists page\r\n                </Button>\r\n                <Button as={Link} to='/patients' primary >\r\n                    Return to patients page \r\n                </Button>\r\n                <Button as={Link} to='/cities' primary >\r\n                    Return to cities page \r\n                </Button>\r\n                <Button as={Link} to='/doctors' primary >\r\n                    Return to doctors page \r\n                </Button>\r\n                <Button as={Link} to='/rooms' primary >\r\n                    Return to rooms page \r\n                </Button>\r\n                <Button as={Link} to='/therapies' primary >\r\n                    Return to therapies page \r\n                </Button>\r\n                <Button as={Link} to='/therapies' primary >\r\n                    Return to tests page \r\n                </Button>\r\n                <Button as={Link} to='/therapies' primary >\r\n                    Return to tech employees page \r\n                </Button>\r\n                \r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n} ","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, List, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport { Therapy } from '../../../app/models/therapy';\r\nimport CityDetailedSidebar from '../../cities/details/CityDetailedSidebar';\r\nimport { City } from '../../../app/models/city';\r\n\r\nexport default observer(function TherapyForm() {\r\n    const history = useHistory();\r\n    const { therapyStore } = useStore();\r\n    const { createTherapy, updateTherapy, loadTherapy, loadingInitial} = therapyStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [therapy, setTherapy] = useState<Therapy>({\r\n        id: '',\r\n        Pershkrimi: '',\r\n\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        Pershkrimi: Yup.string().required('Pershkrimi is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadTherapy(id).then(therapy => setTherapy(therapy!))\r\n    }, [id, loadTherapy]);\r\n\r\n    function handleFormSubmit(therapy: Therapy) {\r\n        if (!therapy.id) {\r\n            let newTherapy = {\r\n                ...therapy,\r\n                id: uuid()\r\n            };\r\n            createTherapy(newTherapy).then(() => history.push(`/therapies/${newTherapy.id}`))\r\n        } else {\r\n            updateTherapy(therapy).then(() => history.push(`/therapies/${therapy.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading therapy...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Therapy Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema={validationSchema}\r\n            enableReinitialize \r\n            initialValues={therapy} \r\n            onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextArea rows={3} name='Pershkrimi' placeholder='Pershkrimi' />\r\n                        {/* <List horizontal>\r\n                            {cities.map(city =>(\r\n                                <List.Item key={city.CityName}>\r\n                                </List.Item>\r\n                            ))}\r\n\r\n                        </List> */}\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive type='submit' \r\n                            content='Submit' />\r\n                        <Button as={Link} to='/therapies' floated='right' type='submit' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport {Segment, Header, Comment, Form, Button} from 'semantic-ui-react'\r\n\r\nexport default observer(function TherapyDetailedChat() {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this therapy</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Matt</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>Today at 5:42PM</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Great service at this therapy!</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Joe Henderson</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>5 days ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Fort e mire mikpritja</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Form reply>\r\n                        <Form.TextArea/>\r\n                        <Button\r\n                            content='Add Reply'\r\n                            labelPosition='left'\r\n                            icon='edit'\r\n                            primary\r\n                        />\r\n                    </Form>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { Therapy } from '../../../app/models/therapy';\r\n\r\nconst therapyImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst therapyImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '2%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    therapy: Therapy\r\n}\r\n\r\nexport default observer (function TherapyDetailedHeader({therapy}: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/therapyImages/therapy.png`} fluid style={therapyImageStyle}/>\r\n                <Segment style={therapyImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    // content={therapy.Pershkrimi}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p style={{marginRight: 10}}>\r\n                                    {therapy.Pershkrimi}\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button color='teal'>Join</Button>\r\n                <Button>Cancel attendance</Button>\r\n                <Button as={Link} to={`/managetherapy/${therapy.id}`} color='orange' floated='right'>\r\n                    Manage Event\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Therapy} from \"../../../app/models/therapy\";\r\n\r\ninterface Props {\r\n    therapy: Therapy\r\n}\r\n\r\nexport default observer(function TherapyDetailedInfo({therapy}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{therapy.Pershkrimi}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Therapy } from '../../../app/models/therapy'\r\n\r\ninterface Props {\r\n    therapy: Therapy;\r\n}\r\n\r\nexport default observer(function TherapyDetailedSidebar() {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Bob</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport TherapyDetailedChat from './TherapyDetailedChat';\r\nimport TherapyDetailedHeader from './TherapyDetailedHeader';\r\nimport TherapyDetailedInfo from './TherapyDetailedInfo';\r\nimport TherapyDetailedSidebar from './TherapyDetailedSidebar';\r\n\r\nexport default observer(function TherapyDetails() {\r\n    const {therapyStore} = useStore();\r\n    const {selectedTherapy: therapy, loadTherapy, loadingInitial} = therapyStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadTherapy(id);\r\n    }, [id, loadTherapy]);\r\n\r\n    if (loadingInitial || !therapy) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <TherapyDetailedHeader therapy={therapy} />\r\n                <TherapyDetailedInfo therapy={therapy} />\r\n                <TherapyDetailedChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <TherapyDetailedSidebar />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\n\r\nexport default function TherapyFilters() {\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%' }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item content='All Therapies' />\r\n                <Menu.Item content=\"I'm going\" />\r\n                <Menu.Item content=\"I'm hosting\" />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar />\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button,Icon, Item, Segment } from 'semantic-ui-react';\r\nimport { Therapy } from '../../../app/models/therapy';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    therapy: Therapy\r\n}\r\n\r\nexport default function TherapyList({therapy}: Props) {\r\n    const { therapyStore } = useStore();\r\n    const { deleteTherapy, loading } = therapyStore;\r\n    return (\r\n       <Segment.Group>\r\n           <Segment>\r\n               <Item.Group>\r\n                   <Item>\r\n                   <Item.Image size='tiny' circular src='/assets/user.png' />\r\n                       <Item.Content>\r\n                            <Item.Header as={Link} to={`/therapies/${therapy.id}`}>\r\n                                Terapia\r\n                            </Item.Header>\r\n                            <Item.Description>{therapy.Pershkrimi}</Item.Description>\r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n           <Segment clearing>\r\n           <Button\r\n                    as={Link}\r\n                    to={`#`}\r\n                    color='red'\r\n                    floated='right'\r\n                    content='Delete'\r\n                    onClick={() => deleteTherapy(therapy.id)}\r\n                    type='submit'\r\n                    disabled={loading}\r\n                />\r\n               <Button \r\n                    as={Link}\r\n                    to={`/therapies/${therapy.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n               />\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport TherapyListItem from './TherapyListItem';\r\n\r\nexport default observer(function TherapyList() {\r\n\r\n    const {therapyStore} = useStore();\r\n    const {therapiesByName} = therapyStore\r\n\r\n    return ( \r\n        <>\r\n            {therapiesByName.map(therapy => (\r\n                <TherapyListItem key={therapy.id} therapy={therapy} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport TherapyFilters from './TherapyFilters';\r\nimport TherapyList from './TherapyList';\r\n\r\nexport default observer(function TherapyDashboard() {\r\n\r\n    const {therapyStore} = useStore();\r\n    const {loadTherapies, therapyRegistry} = therapyStore;\r\n\r\n    useEffect(() => {\r\n        if (therapyRegistry.size <= 1) loadTherapies();\r\n    }, [therapyRegistry.size, loadTherapies])\r\n\r\n    if (therapyStore.loadingInitial) return <LoadingComponent content='Loading therapies...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Row columns={2}>\r\n                <Grid.Column>\r\n                    <h2>Therapies</h2>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Button\r\n                        as={Link}\r\n                        to={`/createTherapy`}\r\n                        color='blue'\r\n                        floated='right'\r\n                        content='Add'\r\n                    />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Column width='10'>\r\n                <TherapyList />\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <TherapyFilters />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Segment } from \"semantic-ui-react\";\r\nimport React from 'react';\r\nimport { Doctor } from \"../../../app/models/doctor\";\r\nimport { format } from \"date-fns\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface Props {\r\n    doctor : Doctor\r\n}\r\n\r\nexport default function DoctorListItem({doctor}: Props){\r\n    const {doctorStore} = useStore();\r\n    const{deleteDoctor,  loading} = doctorStore;\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src='/assets/doctor.png' />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/doctors/${doctor.id}`} >\r\n                                {doctor.name}\r\n                            </Item.Header>\r\n                            <Item.Description>Doctor in HMS</Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                <Icon name='clock' /> {format(doctor.dateofbirth!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon  marker='marker'/>{doctor.gender}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                Interns/Residents under your supervision\r\n            </Segment>\r\n            <Segment clearing>\r\n              \r\n                <Button \r\n                    as={Link}\r\n                    to={`/doctors/${doctor.id}`}\r\n                    color='teal'\r\n                    floated= 'right'\r\n                    content= 'View'\r\n                />\r\n                   <Button  onClick={() => {if(window.confirm('Delete the Doctor?')){deleteDoctor(doctor.id)};}} type='submit'  color='red' disabled={loading} content='Delete'/>\r\n                  \r\n     \r\n\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Item, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport DoctorListItem from './DoctorListItem';\r\n\r\n\r\nexport default observer( function DoctorList(){\r\n    const {doctorStore} = useStore();\r\n    const{doctorsByDate} = doctorStore;\r\n\r\n    return (\r\n           <Segment>\r\n            <Item.Group divided>\r\n                {doctorsByDate.map(doctor =>(\r\n                    <DoctorListItem key={doctor.id} doctor={doctor} />\r\n                ))}\r\n\r\n            </Item.Group>\r\n        </Segment>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\n\r\n\r\nexport default function DoctorFilters() {\r\n    return(\r\n        <>\r\n                <Menu vertical size='large' style={{width: '100%' }} >\r\n            <Header icon='filter' attached color='teal' content='Doctors' />\r\n            <Menu.Item content='All Doctors' />\r\n            \r\n        </Menu>\r\n        <Header />\r\n      \r\n        </>\r\n\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport DoctorList from './DoctorList';\r\nimport DoctorFilters from './DoctorFilters';\r\nimport { Link } from 'react-router-dom';\r\nimport Calendar from 'react-calendar';\r\n\r\nexport default observer(function DoctorDashboard(){\r\n    \r\n    const {doctorStore} =useStore();     \r\n    const {loadDoctors, doctorRegistry} = doctorStore;  \r\n\r\n        useEffect(() => {\r\n         if (doctorRegistry.size <= 1) loadDoctors();\r\n            }, [doctorRegistry.size, loadDoctors])\r\n\r\n    if(doctorStore.loadingInitial) return <LoadingComponent content ='Loading app'/>\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width ='10'>\r\n              <DoctorList />\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <DoctorFilters />\r\n                <Button\r\n          as={Link}\r\n          to={`/createDoctor`}\r\n          color='blue'\r\n           floated='right'\r\n          content='Add'\r\n        />\r\n        <br /><br /><br />\r\n          <Calendar />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { Doctor } from '../../../app/models/doctor';\r\n\r\nconst doctorImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst doctorImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    doctor: Doctor\r\n}\r\n\r\nexport default observer (function DoctorDetailedHeader({doctor: Doctor}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/user.png`} fluid style={doctorImageStyle}/>\r\n                <Segment style={doctorImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={Doctor.name}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(Doctor.dateofbirth!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Doctor in <strong>HMS</strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button as={Link} to='/doctors' color='orange' floated='right'>\r\n                    Cancel\r\n                </Button>\r\n                <Button as={Link} to={`/managedoctor/${Doctor.id}`} color='orange' floated='right'>\r\n                    Manage Doctor\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Doctor } from '../../../app/models/doctor';\r\n\r\ninterface Props {\r\n    doctor: Doctor\r\n}\r\n\r\nexport default observer(function DoctorDetailedInfo({doctor}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{doctor.designation}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n            {format(doctor.dateofbirth!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{doctor.street_address}, {doctor.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nexport default observer(function DoctorDetailedSidebar () {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                3 People under your supervision today\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Bob</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Doctor</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Nurse</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport DoctorDetailedHeader from './DoctorDetailedHeader';\r\nimport DoctorDetailedInfo from './DoctorDetailedInfo';\r\nimport DoctorDetailedSidebar from './DoctorDetailedSidebar';\r\n\r\n\r\n\r\nexport default observer( function DoctorDetails(){\r\n   const{doctorStore} = useStore();\r\n   const {selectedDoctor: doctor,loadDoctor, loadingInitial} = doctorStore;\r\n   const {id} = useParams<{id:string}>();\r\n\r\n   useEffect(() => {\r\n     if (id) loadDoctor(id);\r\n   }, [id, loadDoctor]);\r\n\r\n   if(loadingInitial || !doctor) return <LoadingComponent />;\r\n\r\n    return(\r\n          <Grid>\r\n            <Grid.Column width={10}>\r\n              <DoctorDetailedHeader doctor={doctor} />\r\n              <DoctorDetailedInfo doctor={doctor} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6} >\r\n              <DoctorDetailedSidebar />\r\n            </Grid.Column>\r\n          </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n              <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const cityOptions=[\r\n    {text: 'Prishtine', value:'Prishtine'},\r\n    {text: 'Prizren', value:'Prizren'},\r\n    {text: 'Peje', value:'Peje'},\r\n    {text: 'Gjakove', value:'Gjakove'},\r\n    {text: 'Ferizaj', value:'Ferizaj'},\r\n    {text: 'Gjilan', value:'Gjilan'},\r\n    {text: 'Mitrovice', value:'Mitrovice'},\r\n]","export const countryOptions=[\r\n    {text: 'Kosove', value:'Kosove'},\r\n]","import { observer } from 'mobx-react-lite';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { cityOptions } from '../../../app/common/options/cityOptions';\r\nimport { countryOptions } from '../../../app/common/options/countryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { Doctor } from '../../../app/models/doctor';\r\n\r\n\r\n\r\nexport default observer(function DoctorForm(){\r\n    const history = useHistory();\r\n    const {doctorStore} = useStore();\r\n    const {createDoctor, updateDoctor, \r\n            loading, loadDoctor, loadingInitial} = doctorStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [doctor, setDoctor] =useState<Doctor>({\r\n        id: '',\r\n        name: '',\r\n        surname: '',\r\n        dateofbirth: null,\r\n        gender: '',\r\n        street_address: '',\r\n        city: '',\r\n        country: '',\r\n        postal_code: '',\r\n        phone: '',\r\n        designation: '',\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required('The patient name is required'),\r\n        surname: Yup.string().required('The patient surname is required'),\r\n        dateofbirth: Yup.string().required(\"The Date of Birth is required\").nullable(),\r\n        gender: Yup.string().required(),\r\n        street_address: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n        country: Yup.string().required(),\r\n        postal_code: Yup.string().required(),\r\n        phone: Yup.string().required(),\r\n        designation: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadDoctor(id).then(doctor => setDoctor(doctor!))\r\n    }, [id, loadDoctor]);\r\n\r\n    function handleFormSubmit(doctor: Doctor){\r\n       if (doctor.id.length === 0 ) {\r\n           let newDoctor ={\r\n               ...doctor,\r\n               id:uuid()\r\n           };\r\n           createDoctor(newDoctor).then(() => history.push(`/doctors/${newDoctor.id}`))\r\n       }else{\r\n           updateDoctor(doctor).then(() => history.push(`/doctors/${doctor.id}`))\r\n       }\r\n    }\r\n\r\n    function handleInputChange (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        const {name, value} = event.target;\r\n        setDoctor({...doctor, [name]:value})\r\n     \r\n    }\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading doctor...' /> \r\n\r\n    return(\r\n        <Segment clearing>\r\n             <Header content='Doctor Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema ={validationSchema}\r\n            enableReinitialize \r\n            initialValues={doctor} \r\n            onSubmit={values => handleFormSubmit(values)} >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <MyTextInput name='name' placeholder='Name' />\r\n                    <MyTextInput placeholder ='surname'   name='surname' />\r\n                    <MyDateInput\r\n                        placeholderText ='dateofbirth' \r\n                        name='dateofbirth'\r\n                    />\r\n                    <MyTextInput  placeholder ='gender'    name='gender'  />\r\n                    <MyTextInput placeholder ='street_address' name='street_address'  />\r\n                    <MySelectInput options={cityOptions} placeholder ='city'    name='city'  />\r\n                    <MySelectInput options={countryOptions} placeholder ='country'  name='country'  />\r\n                    <MyTextInput placeholder ='postal_code' name='postal_code'  />\r\n                    <MyTextInput placeholder ='phone'   name='phone' />\r\n                    <MyTextInput placeholder ='designation'   name='designation' />\r\n                    <Button \r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={loading} floated = 'right'\r\n                        positive type='submit' content='Submit' />\r\n                    <Button as={Link} to='/doctors' floated = 'right'  type='button' content='Cancel' />  \r\n                </Form>                 \r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import format from 'date-fns/format';\r\nimport React from 'react';\r\nimport { Link,  } from 'react-router-dom';\r\nimport { Button, Icon, Item, Segment } from 'semantic-ui-react';\r\nimport { TechEmployee } from '../../../app/models/techEmployee';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    techEmployee: TechEmployee\r\n}\r\n\r\nexport default function TechEmployeeListItem({techEmployee}: Props) {\r\n    const {techEmployeeStore} = useStore();\r\n    const{deleteTechEmployee,  loading,} = techEmployeeStore;\r\n\r\n\r\n    return (\r\n \r\n       <Segment.Group>\r\n           <Segment>\r\n               <Item.Group>\r\n                   <Item>\r\n                   <Item.Image src={`/assets/nursesImages/${techEmployee.gjinia}.png`} />\r\n                 \r\n                       <Item.Content>\r\n                            <Item.Header as={Link} to={`/techEmployees/${techEmployee.id}`}>\r\n                             <h1>   {techEmployee.emri} {techEmployee.mbiemri}</h1>\r\n                            <h3>    {techEmployee.department}</h3>\r\n\r\n                            </Item.Header>\r\n                            {/* <Item.Description>Pershkrim i infermierit/es</Item.Description> */}\r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n           <Segment>\r\n               <span>\r\n                   <Icon name='calendar'/> {format(techEmployee.datelindja!, 'dd MMM yyyy')}\r\n                   <br/>\r\n                   <Icon name='map marker' />{techEmployee.adresa}\r\n               </span>\r\n           </Segment>\r\n           <Segment clearing>\r\n           <Button as={Link} to={`/managetechEmployee/${techEmployee.id}`} color='teal' floated='right'>\r\n                Edit\r\n           </Button>\r\n           {/* <Button\r\n\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\tdeleteTechEmployee(e, techEmployee.id!);\r\n\t\t\t\t\t\t\t\t\t\t\thistory.push('/techEmployees');\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tname={techEmployee.id}\r\n\t\t\t\t\t\t\t\t\t\tfloated='right'\r\n\t\t\t\t\t\t\t\t\t\tnegative\r\n\t\t\t\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\t\t\t\tcontent='Delete'\r\n\t\t\t\t\t\t\t\t\t\tdisabled={loading}\r\n\t\t\t\t\t\t\t\t\t/> */}\r\n                                    <Button onClick={() => {if(window.confirm('Delete the TechEmployee?')){deleteTechEmployee(techEmployee.id)};}}  type='submit' color='red' disabled={loading} >Delete</Button>\r\n\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport TechEmployeeListItem from './TechEmployeeListItem';\r\n\r\nexport default observer(function TechEmployeeList() {\r\n\r\n    const {techEmployeeStore} = useStore();\r\n    const {techEmployeesByDate} = techEmployeeStore\r\n\r\n    return ( //video 5.7\r\n        <>\r\n            {techEmployeesByDate.map(techEmployee => (\r\n                <TechEmployeeListItem key={techEmployee.id} techEmployee={techEmployee} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Grid, Header, Menu } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nimport TechEmployeeList from './TechEmployeeList';\r\n\r\nexport default observer(function TechEmployeeDashboard() {\r\n\r\n    const {techEmployeeStore} = useStore();\r\n    const {loadTechEmployees, techEmployeeRegistry} = techEmployeeStore;\r\n\r\n    useEffect(() => {\r\n        if (techEmployeeRegistry.size <= 1) loadTechEmployees();\r\n    }, [techEmployeeRegistry.size, loadTechEmployees])\r\n\r\n    if (techEmployeeStore.loadingInitial) return <LoadingComponent content='Loading app' />\r\n\r\n    return (\r\n       \r\n//    <Grid>\r\n//         <Grid.Row columns={1}>\r\n//         <Grid.Column>\r\n//         <h2>Farmacists</h2>\r\n//         <Button\r\n//           as={Link}\r\n//           to={`/createTechEmployee`}\r\n//           color='blue'\r\n//            floated='left'\r\n//           content='Add'\r\n//         />\r\n//         </Grid.Column>\r\n//         <Grid.Column>\r\n//         </Grid.Column>\r\n//       </Grid.Row>\r\n            \r\n//             <Grid.Column width='10'>\r\n//                 <TechEmployeeList />\r\n   \r\n            \r\n//             </Grid.Column>\r\n         \r\n          \r\n//         </Grid>\r\n<Grid>\r\n<Grid.Column width='10'>\r\n    <TechEmployeeList />\r\n</Grid.Column>\r\n<Grid.Column width='5'>\r\n<>\r\n        <Menu vertical size='large' style={{ width: '100%' }}>\r\n            <Header icon='filter' attached color='teal' content='Tech Employees' />\r\n            \r\n        </Menu>\r\n        <Header />\r\n       \r\n    </>\r\n  <Button\r\nas={Link}\r\nto={`/createTechEmployee`}\r\ncolor='blue'\r\nfloated='right'\r\ncontent='Add'\r\n/>\r\n</Grid.Column>\r\n\r\n</Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik,Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { TechEmployee } from '../../../app/models/techEmployee';\r\n\r\n\r\nexport default observer(function TechEmployeeForm() {\r\n    const history = useHistory();\r\n    const {techEmployeeStore} = useStore();\r\n    const{createTechEmployee, updateTechEmployee, loading, loadTechEmployee, loadingInitial} = techEmployeeStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [TechEmployee, setTechEmployee] = useState<TechEmployee>({\r\n        id: '',\r\n        emri: '',\r\n        mbiemri: '',\r\n        username: '',\r\n        datelindja: null,\r\n        adresa: '',\r\n        qyteti: '',\r\n        email: '',\r\n        gjinia: '',\r\n        paga:  0,\r\n        department:''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        emri: Yup.string().required(),\r\n        mbiemri: Yup.string().required(),\r\n        username: Yup.string().required(),\r\n        datelindja: Yup.string().required('Date is required!').nullable(),\r\n        adresa: Yup.string().required(),\r\n        qyteti: Yup.string().required(),\r\n        email: Yup.string().required(),\r\n        gjinia: Yup.string().required(),\r\n        paga: Yup.string().required(),\r\n        department: Yup.string().required(),\r\n        \r\n  \r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(id) loadTechEmployee(id).then(techEmployee => setTechEmployee(techEmployee!))\r\n    },[id, loadTechEmployee]);\r\n\r\n\r\n    function handleFormSubmit(techEmployee:TechEmployee) {\r\n       if(techEmployee.id.length === 0){\r\n           let newTechEmployee = {\r\n               ...techEmployee,\r\n               id: uuid()\r\n           };\r\n           createTechEmployee(newTechEmployee).then(() => history.push(`/techEmployees`))\r\n       }else{\r\n           updateTechEmployee(techEmployee).then(() => history.push(`/techEmployees`))\r\n       }\r\n       \r\n    }\r\n\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading TechEmployee ...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='TechEmployee Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema={validationSchema}\r\n             enableReinitialize\r\n             initialValues={TechEmployee} onSubmit={values => handleFormSubmit(values)}>\r\n            {({handleSubmit, isValid,isSubmitting,dirty})=>(\r\n                     <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        \r\n\r\n                   \r\n                        <MyTextInput name='emri' placeholder='Emri'/>                        \r\n                        <MyTextInput placeholder='Mbiemri'  name='mbiemri' />                    \r\n                        <MyTextInput  placeholder='Email'  name='email' />\r\n                        <MyDateInput \r\n                        placeholderText='Datelindja'  \r\n                        name='datelindja'                      \r\n                        timeCaption='time'\r\n                        dateFormat='MMMM d, yyyy'                   \r\n                        />\r\n                        <MyTextInput placeholder='Nderrimi'  name='username' />\r\n                        <MyTextInput placeholder='Gjinia'  name='gjinia' />\r\n                        <MyTextInput placeholder='Paga'  name='paga'/>\r\n                        <MyTextInput placeholder='Department'  name='department'/>\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='Adresa'  name='adresa' />\r\n                        <MyTextInput placeholder='Qyteti'  name='qyteti'/>\r\n                     <Button \r\n                     disabled={isSubmitting || !dirty || !isValid}\r\n                     loading={loading} floated='right' positive type='submit' content='Submit' />\r\n                     <Button as={Link} to='/techEmployees' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n                \r\n            </Formik>\r\n           \r\n            \r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\n\r\nexport default function SrgeryFilters() {\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%' }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item content='All Surgeries' />\r\n                <Menu.Item content=\"I'm going\" />\r\n                <Menu.Item content=\"I'm hosting\" />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar />\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Segment } from 'semantic-ui-react';\r\nimport { Surgery } from '../../../app/models/surgery';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    surgery: Surgery\r\n}\r\n\r\nexport default function SurgeryListItem({ surgery }: Props) {\r\n    const { surgeryStore } = useStore();\r\n    const { deleteSurgery, loading } = surgeryStore;\r\n    return (\r\n        <Segment.Group>\r\n\r\n            <Segment>\r\n                <p> {surgery.SurgeryName}</p>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src='/assets/user.png' />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/surgeries/${surgery.Id}`}>\r\n                                {surgery.SurgeryName} Operacion i zemres\r\n                            </Item.Header>\r\n                            <Item.Description>Pershkrim i operacionit</Item.Description>\r\n                            {surgery.Description} Operacioni kaloi me sukses\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name=\"dollar\" />{surgery.Pagesa} 100.00\r\n                    <br />\r\n                    <Icon name='map marker' />{surgery.Terapia} Paracetamol 2 x 1 ne dite\r\n                </span>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <Button\r\n                    as={Link}\r\n                    to={`#`}\r\n                    color='red'\r\n                    floated='right'\r\n                    content='Delete'\r\n                    onClick={() => deleteSurgery(surgery.Id)}\r\n                    type='submit'\r\n                    disabled={loading}\r\n                />\r\n                <Button\r\n                    as={Link}\r\n                    to={`/surgeries/${surgery.Id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport SurgeryListItem from './SurgeryListItem';\r\n\r\nexport default observer(function SurgeryList() {\r\n\r\n    const {surgeryStore} = useStore();\r\n    const {surgeriesByDate} = surgeryStore;\r\n\r\n    return ( //video 5.7\r\n        <>\r\n            {surgeriesByDate.map(surgery => (\r\n                <SurgeryListItem key={surgery.Id} surgery={surgery} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport SurgeryFilters from './SurgeryFilters';\r\nimport SurgeryList from './SurgeryList';\r\n\r\nexport default observer(function SurgeryDashboard() {\r\n\r\n    const {surgeryStore} = useStore();\r\n    const {loadSurgeries, surgeryRegistry} = surgeryStore;\r\n\r\n    useEffect(() => {\r\n        if (surgeryRegistry.size <= 1) loadSurgeries();\r\n    }, [surgeryRegistry.size, loadSurgeries])\r\n\r\n    if (surgeryStore.loadingInitial) return <LoadingComponent content='Loading app' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Row columns={2}>\r\n                <Grid.Column>\r\n                    <h2>Surgeries</h2>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Button\r\n                        as={Link}\r\n                        to={`/createSurgery`}\r\n                        color='blue'\r\n                        floated='right'\r\n                        content='Add'\r\n                    />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Column width='10'>\r\n                <SurgeryList />\r\n            </Grid.Column>\r\n            <Grid.Column width='5'>\r\n              <SurgeryFilters/>\r\n            </Grid.Column>\r\n          \r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport {Segment, Header, Comment, Form, Button} from 'semantic-ui-react'\r\n\r\nexport default observer(function SurgeryDetailedChat() {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this surgery</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Matt</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>Today at 5:42PM</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Great service at this department!</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Joe Henderson</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>5 days ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Fort e mire mikpritja</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Form reply>\r\n                        <Form.TextArea/>\r\n                        <Button\r\n                            content='Add Reply'\r\n                            labelPosition='left'\r\n                            icon='edit'\r\n                            primary\r\n                        />\r\n                    </Form>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { Surgery } from '../../../app/models/surgery';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nconst surgeryImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst surgeryImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    surgery: Surgery\r\n}\r\n\r\nexport default observer (function SurgeryDetailedHeader({surgery}: Props) {\r\n    return (\r\n        \r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n            <Image src={`/assets/surgeryImages/${surgery.Description}.jpg`} fluid style={surgeryImageStyle } />\r\n                <Segment style={surgeryImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={surgery.SurgeryName}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>\r\n                                    {format (surgery.Date!, 'dd MMM yyyy')}\r\n                                </p>\r\n                                <p>\r\n                                    Informata per operacionin\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button color='teal'>Join </Button>\r\n                <Button>Cancel attendance</Button>\r\n                <Button as={Link} to={`/managesurgery/${surgery.Id}`} color='orange' floated='right'>\r\n                    Manage Event\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Surgery } from \"../../../app/models/surgery\";\r\n\r\n interface Props {\r\n     surgery: Surgery;\r\n }\r\n\r\nexport default observer(function SurgeryDetailedInfo({surgery}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>Pershkrimi i operacionit</p>\r\n                        <p><Icon name='calendar'/>{format(surgery.Date!, 'dd MMM yyyy')}</p>\r\n                        <p> <Icon name='map marker' />{surgery.Description}</p>\r\n                    </Grid.Column>\r\n                    \r\n             \r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nexport default observer(function SurgeryDetailedSidebar () {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                3 People Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Bob</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport SurgeryDetailedChat from './SurgeryDetailedChat';\r\nimport SurgeryDetailedHeader from './SurgeryDetailedHeader';\r\nimport SurgeryDetailedInfo from './SurgeryDetailedInfo';\r\nimport SurgeryDetailedSidebar from './SurgeryDetailedSidebar';\r\n\r\nexport default observer(function SurgeryDetails() {\r\n    const {surgeryStore} = useStore();\r\n    const {selectedSurgery: surgery, loadSurgery, loadingInitial} = surgeryStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadSurgery(id);\r\n    }, [id, loadSurgery]);\r\n\r\n    if (loadingInitial || !surgery) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n    \r\n            <Grid.Column width={10}>\r\n                \r\n                <SurgeryDetailedHeader surgery={surgery} />\r\n            \r\n                <SurgeryDetailedInfo surgery={surgery} />\r\n                <SurgeryDetailedChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <SurgeryDetailedSidebar />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { Surgery } from '../../../app/models/surgery';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\n\r\n\r\nexport default observer(function SurgeryForm() {\r\n    const history = useHistory();\r\n    const { surgeryStore } = useStore();\r\n    const { createSurgery, updateSurgery, loading, loadSurgery, loadingInitial } = surgeryStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [surgery, setSurgery] = useState<Surgery>({\r\n        Id: '',\r\n        SurgeryName: '',\r\n        Date: null,\r\n        Description: '',\r\n        Pagesa: 0,\r\n        Terapia: '',\r\n\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        SurgeryName: Yup.string().required(),\r\n        Date: Yup.string().required(),\r\n        Descrption: Yup.string().required(),\r\n        Pagesa: Yup.string().required(),\r\n        Terapia: Yup.string().required(),\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadSurgery(id).then(surgery => setSurgery(surgery!))\r\n    }, [id, loadSurgery]);\r\n\r\n\r\n    function handleFormSubmit(surgery: Surgery) {\r\n        if (!surgery.Id) {\r\n            let newSurgery = {\r\n                ...surgery,\r\n                id: uuid()\r\n            };\r\n            createSurgery(newSurgery).then(() => history.push(`/surgeries/${newSurgery.Id}`))\r\n        } else {\r\n            updateSurgery(surgery).then(() => history.push(`/surgeries/${surgery.Id}`))\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading surgery ...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Surgery Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={surgery} onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n\r\n\r\n\r\n                        <MyTextInput name='SurgeryName' placeholder='SurgeryName' />\r\n\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='Date'\r\n\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy'\r\n\r\n                        />\r\n\r\n                        <MyTextArea  rows={3} placeholder='Description' name='Description' />\r\n\r\n                        \r\n                        <MyTextInput placeholder='Pagesa' name='Pagesa' />\r\n\r\n                        <MyTextInput placeholder='Terapia' name='Terapia' />\r\n\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={loading}\r\n                            floated='right' \r\n                            positive type='submit' \r\n                            content='Submit' />\r\n                        <Button as={Link} to='/surgeries' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n\r\n            </Formik>\r\n\r\n\r\n        </Segment>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfileAbout from './ProfileAbout';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n    //     {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n    //     {menuItem: 'Events', render: () => <Tab.Pane>Events Content</Tab.Pane>},\r\n    //     {menuItem: 'Followers', render: () => <Tab.Pane>Followers Content</Tab.Pane>},\r\n    //     {menuItem: 'Following', render: () => <Tab.Pane>Following Content</Tab.Pane>},\r\n    ];\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Divider, Grid, Header, Item, Reveal, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={'/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n    }, [loadProfile, username])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\n\r\nexport default function CountryFilters() {\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%' }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item content='All Countries' />\r\n                <Menu.Item content=\"I'm going\" />\r\n                <Menu.Item content=\"I'm hosting\" />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar />\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Segment } from 'semantic-ui-react';\r\nimport { Country } from '../../../app/models/country';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    country: Country;\r\n}\r\n\r\nexport default function CountryListItem({country}: Props) {\r\n    const { countryStore } = useStore();\r\n    const { deleteCountry, loading } = countryStore;\r\n    return (\r\n       <Segment.Group>\r\n           <Segment>\r\n               <Item.Group>\r\n                   <Item>\r\n                   <Item.Image size='tiny' circular src='/assets/user.png' />\r\n                       <Item.Content>\r\n                            <Item.Header as={Link} to={`/countries/${country.Id}`}>\r\n                                {country.CountryName}\r\n                            </Item.Header>\r\n                            <Item.Description>{country.Population}</Item.Description>\r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n           <Segment>\r\n           <span>\r\n                    <Icon name='marker' /> {country.Goverment}\r\n                </span>\r\n           </Segment>\r\n           <Segment clearing>\r\n           <Button\r\n                    as={Link}\r\n                    to={`#`}\r\n                    color='red'\r\n                    floated='right'\r\n                    content='Delete'\r\n                    onClick={() => deleteCountry(country.Id)}\r\n                    type='submit'\r\n                    disabled={loading}\r\n                />\r\n               <Button \r\n                    as={Link}\r\n                    to={`/countries/${country.Id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n               />\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport CountryListItem from './CountryListItem';\r\n\r\nexport default observer(function CountryList() {\r\n\r\n    const {countryStore} = useStore();\r\n    const {countriesByName} = countryStore\r\n\r\n    return ( //video 5.7\r\n        <>\r\n            {countriesByName.map(country => (\r\n                <CountryListItem key={country.Id} country={country} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport CountryFilters from './CountryFilters';\r\nimport CountryList from './CountryList';\r\n\r\nexport default observer(function CountryDashboard() {\r\n\r\n    const {countryStore} = useStore();\r\n    const {loadCountries, countryRegistry} = countryStore;\r\n\r\n    useEffect(() => {\r\n        if (countryRegistry.size <= 1) loadCountries();\r\n    }, [countryRegistry.size, loadCountries])\r\n\r\n    if (countryStore.loadingInitial) return <LoadingComponent content='Loading countries...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                <CountryList />\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <CountryFilters />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport {Segment, Header, Comment, Form, Button} from 'semantic-ui-react'\r\n\r\nexport default observer(function CountryDetailedChat() {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this department</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Matt</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>Today at 5:42PM</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Great service at this department!</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Comment>\r\n                        <Comment.Avatar src='/assets/user.png'/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>Joe Henderson</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>5 days ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>Fort e mire mikpritja</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n\r\n                    <Form reply>\r\n                        <Form.TextArea/>\r\n                        <Button\r\n                            content='Add Reply'\r\n                            labelPosition='left'\r\n                            icon='edit'\r\n                            primary\r\n                        />\r\n                    </Form>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image } from 'semantic-ui-react'\r\nimport { Country } from '../../../app/models/country';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst countryImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst departentImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '2%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    country: Country\r\n}\r\n\r\nexport default observer(function CountryDetailedHeader({ country }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                <Image src={`/assets/countryImages/${country.CountryName}.jpg`} fluid style={countryImageStyle} />\r\n                <Segment style={departentImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={country.CountryName}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p style={{ marginRight: 10 }}>\r\n                                    {country.Location}\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button color='teal'>Join </Button>\r\n                <Button>Cancel attendance</Button>\r\n                <Button as={Link} to={`/managecountry/${country.Id}`} color='orange' floated='right'>\r\n                    Manage Country\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Country} from \"../../../app/models/country\";\r\n\r\ninterface Props {\r\n    country: Country\r\n}\r\n\r\nexport default observer(function CountryDetailedInfo({country}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{country.CountryName}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Country } from '../../../app/models/country'\r\n\r\ninterface Props {\r\n    country: Country;\r\n}\r\n\r\nexport default observer(function CountryDetailedSidebar() {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Bob</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport CountryDetailedChat from './CountryDetailedChat';\r\nimport CountryDetailedHeader from './CountryDetailedHeader';\r\nimport CountryDetailedInfo from './CountryDetailedInfo';\r\nimport CountryDetailedSidebar from './CountryDetailedSidebar';\r\n\r\nexport default observer(function CountryDetails() {\r\n    const {countryStore} = useStore();\r\n    const {selectedCountry: country, loadCountry, loadingInitial} = countryStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadCountry(id);\r\n    }, [id, loadCountry]);\r\n\r\n    if (loadingInitial || !country) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <CountryDetailedHeader country={country} />\r\n                <CountryDetailedInfo country={country} />\r\n                <CountryDetailedChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <CountryDetailedSidebar/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport { Country } from '../../../app/models/country';\r\n\r\nexport default observer(function CountryForm() {\r\n    const history = useHistory();\r\n    const { countryStore } = useStore();\r\n    const { createCountry, updateCountry, loadCountry, loadingInitial } = countryStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [country, setCountry] = useState<Country>({\r\n        Id: '',\r\n        CountryName: '',\r\n        Location: '',\r\n        Population: '',\r\n        Nation: '',\r\n        Goverment: '',\r\n\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        CountryName: Yup.string().required('Country Name is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadCountry(id).then(country => setCountry(country!))\r\n    }, [id, loadCountry]);\r\n\r\n    function handleFormSubmit(country: Country) {\r\n        if (!country.Id) {\r\n            let newCountry = {\r\n                ...country,\r\n                id: uuid()\r\n            };\r\n            createCountry(newCountry).then(() => history.push(`/countries/${newCountry.Id}`))\r\n        } else {\r\n            updateCountry(country).then(() => history.push(`/countries/${country.Id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading country...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Country Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={country}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name=\"CountryName\" placeholder=\"Country Name\"/>\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right'\r\n                            positive type='submit'\r\n                            content='Submit' />\r\n                        <Button as={Link} to='/countries' floated='right' type='submit' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Segment } from 'semantic-ui-react';\r\nimport { Department } from '../../../app/models/department';\r\nimport { Termin } from '../../../app/models/termin';\r\n// import DepartmentListItemAttendee from './DepartmentListItemAttendee';\r\n\r\ninterface Props {\r\n    termin: Termin;\r\n}\r\n\r\nexport default function TerminListItem({termin}: Props) {\r\n\r\n    return (\r\n       <Segment.Group>\r\n           <Segment>\r\n               <Item.Group>\r\n                   <Item>\r\n                       <Item.Image size='tiny' src={`/assets/departmentImages/${termin.terminDepartment}.jpg`} />\r\n                       <Item.Content>\r\n                            <Item.Header as={Link} to={`/termins/${termin.id}`}>\r\n                                Termini në: {termin.terminDepartment}\r\n                            </Item.Header>\r\n                            <Item.Description>{termin.terminDescription}</Item.Description>\r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n           <Segment>\r\n                <span>\r\n                    <Icon name='clock' />Koha: {format(termin.terminTime!, 'dd MMM yyyy h:mm aa')}\r\n                </span>\r\n            </Segment>\r\n           <Segment>\r\n                <span>\r\n                    <Icon name='marker' />Mjeku: {termin.terminDoctor}\r\n                </span>\r\n            </Segment>\r\n           {/* <Segment secondary>\r\n               <DepartmentListItemAttendee departmentAttendees={department.departmentAttendees!} />\r\n           </Segment> */}\r\n           <Segment clearing>\r\n               <Button \r\n                    as={Link}\r\n                    to={`/termins/${termin.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n               />\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport TerminListItem from './TerminListItem';\r\n\r\nexport default observer(function TerminList() {\r\n\r\n    const {terminStore} = useStore();\r\n    const {terminsByDate} = terminStore\r\n\r\n    return ( //video 5.7\r\n        <>\r\n            {terminsByDate.map(termin => (\r\n                <TerminListItem key={termin.id} termin={termin} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport TerminFilters from './TerminFilters';\r\nimport TerminList from './TerminList';\r\n\r\nexport default observer(function TerminDashboard() {\r\n\r\n    const {terminStore} = useStore();\r\n    const {loadTermins, terminRegistry} = terminStore;\r\n\r\n    useEffect(() => {\r\n        if (terminRegistry.size <= 1) loadTermins();\r\n    }, [terminRegistry.size, loadTermins])\r\n\r\n    if (terminStore.loadingInitial) return <LoadingComponent content='Loading appointments...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='16'>\r\n                <TerminList />\r\n            </Grid.Column>\r\n            {/* <Grid.Column width='6'>\r\n                <TerminFilters />\r\n            </Grid.Column> */}\r\n        </Grid>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Modal } from 'semantic-ui-react'\r\nimport { Termin } from '../../../app/models/termin';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst terminImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst terminImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '2%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    termin: Termin\r\n}\r\n\r\nexport default observer(function TerminDetailedHeader({ termin }: Props) {\r\n    const { terminStore: { loading, deleteTermin } } = useStore();\r\n    const [open, setOpen] = React.useState(false)\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                <Image src={`/assets/departmentImages/${termin.terminDepartment}.jpg`} fluid style={terminImageStyle} />\r\n                <Segment style={terminImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={termin.terminDepartment}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p style={{ marginRight: 10 }}>\r\n                                    {termin.terminDescription}\r\n                                </p>\r\n                                <p>{format(termin.terminTime!, 'dd MMM yyyy')}</p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {/* <Button as={Link} to='/termins' color='orange' floated='right'>\r\n                    Cancel\r\n                </Button> */}\r\n                {/* <Button\r\n                    as={Link}\r\n                    to='/termins'\r\n                    color='red'\r\n                    floated='left'\r\n                    content='Cancel Appointment'\r\n                    onClick={() => deleteTermin(termin.id)}\r\n                    type='submit'\r\n                    disabled={loading}\r\n                /> */}\r\n                <Modal\r\n                    basic\r\n                    onClose={() => setOpen(false)}\r\n                    onOpen={() => setOpen(true)}\r\n                    open={open}\r\n                    size='small'\r\n                    trigger={<Button color='red' >Cancel Appointment</Button>}\r\n                >\r\n                    <Header icon>\r\n                        Canceling an Appointment\r\n                    </Header>\r\n                    <Modal.Content>\r\n                        <p>\r\n                            Are you sure you want to cancel this appointment? This appointment will be canceled immediately. You can’t undo this action.\r\n                        </p>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button color='red' inverted onClick={() => deleteTermin(termin.id)} as={Link} to={`/termins`}>\r\n                            Delete\r\n                        </Button>\r\n                        <Button color='grey' inverted onClick={() => setOpen(false)}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n                <Button as={Link} to={`/managetermin/${termin.id}`} color='orange' floated='right'>\r\n                    Manage Appointment\r\n                </Button>\r\n            </Segment>\r\n            {/* <Segment clearing attached='bottom'>\r\n                {department.isHost ? (\r\n                    <Button as={Link} to={`/managedepartment/${department.id}`} color='orange' floated='right'>\r\n                        Manage Event\r\n                    </Button>\r\n                ) : department.isDoctor ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment> */}\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Termin} from \"../../../app/models/termin\";\r\n\r\ninterface Props {\r\n    termin: Termin\r\n}\r\n\r\nexport default observer(function TerminDetailedInfo({termin}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{termin.terminDescription}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(termin.terminTime!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{termin.terminDoctor}, {termin.terminDepartment}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport DepartmentDetailedChat from './DepartmentDetailedChat';\r\nimport TerminDetailedHeader from './TerminDetailedHeader';\r\nimport TerminDetailedInfo from './TerminDetailedInfo';\r\nimport TerminDetailedSidebar from './TerminDetailedSidebar';\r\n\r\nexport default observer(function TerminDetails() {\r\n    const {terminStore} = useStore();\r\n    const {selectedTermin: termin, loadTermin, loadingInitial, clearSelectedTermin} = terminStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadTermin(id);\r\n        return () => clearSelectedTermin();\r\n    }, [id, loadTermin, clearSelectedTermin]);\r\n\r\n    if (loadingInitial || !termin) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <TerminDetailedHeader termin={termin} />\r\n                <TerminDetailedInfo termin={termin} />\r\n                {/* <DepartmentDetailedChat departmentId={department.id}/> */}\r\n            </Grid.Column>\r\n            {/* <Grid.Column width={6}>\r\n                <DepartmentDetailedSidebar department={department} />\r\n            </Grid.Column> */}\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport { Termin } from '../../../app/models/termin';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\n\r\nexport default observer(function TerminForm() {\r\n    const history = useHistory();\r\n    const { terminStore, departmentStore } = useStore();\r\n    const { createTermin, updateTermin, loadTermin, loadingInitial} = terminStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const { departmentsByName, loadDepartments } = departmentStore;\r\n\r\n    const options = new Array();\r\n\r\n    const departments = departmentStore.departmentsByName;\r\n    {\r\n        departments.map(dep => (\r\n            options.push({ \"key\": dep.departmentName, \"value\": dep.departmentName, \"text\": dep.departmentName })\r\n        ))\r\n    }\r\n\r\n    const [termin, setTermin] = useState<Termin>({ //\r\n        id: '',\r\n        terminTime: null,\r\n        terminDescription: '',\r\n        terminDepartment: '',\r\n        terminDoctor: ''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        terminTime: Yup.string().required('The appointment time and date is required'),\r\n        terminDescription: Yup.string().required('The appointment description is required'),\r\n        terminDepartment: Yup.string().required('The appointment department is required'),\r\n        terminDoctor: Yup.string().required('The appointment doctor is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadTermin(id).then(termin => setTermin(termin!))\r\n        loadDepartments();\r\n    }, [id, loadTermin, loadDepartments]);\r\n\r\n    function handleFormSubmit(termin: Termin) {\r\n        if (!termin.id) {\r\n            let newTermin = {\r\n                ...termin,\r\n                id: uuid()\r\n            };\r\n            createTermin(newTermin).then(() => history.push(`/termins/${newTermin.id}`))\r\n        } else {\r\n            updateTermin(termin).then(() => history.push(`/termins/${termin.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading appointments...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Appointment Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema={validationSchema}\r\n            enableReinitialize \r\n            initialValues={termin} \r\n            onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyDateInput\r\n                            placeholderText='Time and Date'\r\n                            name='terminTime'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <MyTextArea rows={3} name='terminDescription' placeholder='Description' />\r\n                        {/* <MyTextInput name='terminDepartment' placeholder='Department' /> */}\r\n                        <MySelectInput name='terminDepartment' placeholder='Department' options={options} ></MySelectInput>\r\n                        <MyTextInput name='terminDoctor' placeholder='Doctor' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive type='submit' \r\n                            content='Submit' />\r\n                        <Button as={Link} to='/termins' floated='right' type='submit' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Segment } from \"semantic-ui-react\";\r\nimport React from 'react';\r\nimport {format} from 'date-fns';\r\nimport { Room } from \"../../../app/models/room\";\r\n\r\ninterface Props {\r\n    room : Room\r\n}\r\n\r\nexport default function RoomListItem({room}: Props){\r\n\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src='/assets/user.png' />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/rooms/${room.id}`} >\r\n                                {room.type},\r\n                               Floor {room.floor_no}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted By HMS</Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon  marker='marker'/>{room.stauts}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                Attendies go here/Patients in the room\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>Total Beds Occupied {room.total_bed_occupied}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/rooms/${room.id}`}\r\n                    color='teal'\r\n                    floated= 'right'\r\n                    content= 'View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Item, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport RoomListItem from './RoomListItem';\r\n\r\nexport default observer( function RoomList(){\r\n    const {roomStore} = useStore();\r\n    const{roomsByDate} = roomStore;\r\n\r\n    return (\r\n           <Segment>\r\n            <Item.Group divided>\r\n            {roomsByDate.map(room =>(\r\n                    <RoomListItem key={room.id} room={room} />\r\n                ))}\r\n\r\n            </Item.Group>\r\n        </Segment>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\n\r\n\r\nexport default function RoomFilters() {\r\n    return(\r\n        <>\r\n                <Menu vertical size='large' style={{width: '100%' }} >\r\n            <Header icon='filter' attached color='teal' content='Filters' />\r\n            <Menu.Item content='All Rooms' />\r\n            <Menu.Item content=\"Patients\" />\r\n            <Menu.Item content=\"Beds\" />\r\n        </Menu>\r\n        <Header />\r\n        <Calendar />\r\n        </>\r\n\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport RoomList from './RoomList';\r\nimport RoomFilters from './RoomFilters';\r\n\r\nexport default observer(function RoomDashboard(){\r\n    const {roomStore} =useStore();     \r\n    const {loadRooms, roomRegistry} = roomStore;  \r\n\r\n        useEffect(() => {\r\n         if (roomRegistry.size <= 1) loadRooms();\r\n            }, [roomRegistry.size, loadRooms])\r\n\r\n    if(roomStore.loadingInitial) return <LoadingComponent content ='Loading rooms...'/>\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width ='10'>\r\n              <RoomList />\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <RoomFilters />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { Room } from '../../../app/models/room';\r\n\r\nconst roomImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst roomImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    room: Room\r\n}\r\n\r\nexport default observer (function RoomDetailedHeader({room: Room}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/user.png`} fluid style={roomImageStyle}/>\r\n                <Segment style={roomImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={Room.type}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>\r\n                                    Hosted by <strong>HMS</strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button color='teal'>Join Room</Button>\r\n                <Button as={Link} to='/rooms' color='orange' floated='right'>\r\n                    Cancel\r\n                </Button>\r\n                <Button as={Link} to={`/manageroom/${Room.id}`} color='orange' floated='right'>\r\n                    Manage Room\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Room } from '../../../app/models/room';\r\n\r\ninterface Props {\r\n    room: Room\r\n}\r\n\r\nexport default observer(function RoomDetailedInfo({room}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>Total Beds {room.total_bed}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n               {room.stauts}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>Occupied Beds {room.total_bed_occupied}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nexport default observer(function RoomDetailedSidebar () {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                3 People in this Room\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Bob</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Doctor</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Patient</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport RoomDetailedHeader from './RoomDetailedHeader';\r\nimport RoomDetailedInfo from './RoomDetailedInfo';\r\nimport RoomDetailedSidebar from './RoomDetailedSidebar';\r\n\r\n\r\n\r\nexport default observer( function RoomDetails(){\r\n   const{roomStore} = useStore();\r\n   const {selectedRoom: room,loadRoom, loadingInitial} = roomStore;\r\n   const {id} = useParams<{id:string}>();\r\n\r\n   useEffect(() => {\r\n     if (id) loadRoom(id);\r\n   }, [id, loadRoom]);\r\n\r\n   if(loadingInitial || !room) return <LoadingComponent />;\r\n\r\n    return(\r\n          <Grid>\r\n            <Grid.Column width={10}>\r\n              <RoomDetailedHeader room={room} />\r\n              <RoomDetailedInfo room={room} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6} >\r\n              <RoomDetailedSidebar />\r\n            </Grid.Column>\r\n          </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport { Room } from '../../../app/models/room';\r\n\r\n\r\nexport default observer(function RoomForm(){\r\n    const history = useHistory();\r\n    const { roomStore } = useStore();\r\n    const { createRoom, updateRoom, \r\n            loading, loadRoom, loadingInitial } = roomStore;\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    const [room, setRoom] = useState<Room>({ \r\n        id: '',\r\n        type: '',\r\n        total_bed: '',\r\n        total_bed_occupied: '',\r\n        stauts: '',\r\n        floor_no: ''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        type: Yup.string().required(),\r\n        total_bed: Yup.string().required(),\r\n        total_bed_occupied: Yup.string().required(),\r\n        status: Yup.string().required(),\r\n        floor_no: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadRoom(id).then(room => setRoom(room!))\r\n    }, [id, loadRoom]);\r\n\r\n      function handleFormSubmit(room: Room){\r\n       if (room.id.length === 0 ) {\r\n           let newRoom ={\r\n               ...room,\r\n               id:uuid()\r\n           };\r\n           createRoom(newRoom).then(() => history.push(`/rooms/${newRoom.id}`))\r\n       }else{\r\n           updateRoom(room).then(() => history.push(`/rooms/${room.id}`))\r\n       }\r\n    }\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading room...' />\r\n\r\n    return(\r\n        <Segment clearing>\r\n            <Header content='Room Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema ={validationSchema}\r\n            enableReinitialize \r\n            initialValues={room} \r\n            onSubmit={values => handleFormSubmit(values)} >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <MyTextInput name='type' placeholder='Type' />\r\n                    <MyTextInput placeholder ='total_bed'   name='total_bed' />\r\n                    <MyTextInput placeholder ='total_bed_occupied'    name='total_bed_occupied'  />\r\n                    <MyTextInput placeholder ='status'   name='status'  />\r\n                    <MyTextInput placeholder ='floor_no'    name='floor_no'  />//\r\n                    <Button \r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} \r\n                        floated = 'right'\r\n                        positive type='submit' \r\n                        content='Submit' />\r\n                    <Button as={Link} to='/rooms' floated = 'right'  type='button' content='Cancel' />  \r\n                </Form>                 \r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Link } from 'react-router-dom';\r\nimport { Button, Item, Segment } from 'semantic-ui-react';\r\nimport { Test } from '../../../app/models/test';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport TestForm from '../form/TestForm';\r\n\r\ninterface Props {\r\n    test: Test\r\n}\r\nexport default function TestListItem({test}: Props) {\r\n\r\n    const {testStore} = useStore();\r\n    const{deleteTest, loading} = testStore;\r\n\r\n    return (\r\n\r\n<Segment.Group>\r\n           <Segment>\r\n               <Item.Group>\r\n                   <Item>\r\n                       <Item.Image size='tiny' circular src='/assets/test.png' />\r\n                       <Item.Content>\r\n                            <Item.Header as={Link} to={`/tests/${test.id}`}>\r\n                                {test.emri}\r\n                            </Item.Header>\r\n                            <Item.Description>Cmimi: {test.cmimi}</Item.Description>\r\n                            <Item.Description>Pershkrimi: {test.pershkrimi}</Item.Description>\r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n           <Segment clearing>\r\n           \r\n\r\n           <Button as={Link} to={`/managetest/${test.id}`} color='green' floated='right'>\r\n                Edit\r\n           </Button>\r\n           \r\n\r\n\r\n           {/* <Button\r\n\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\tdeleteTechEmployee(e, techEmployee.id!);\r\n\t\t\t\t\t\t\t\t\t\t\thistory.push('/techEmployees');\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tname={techEmployee.id}\r\n\t\t\t\t\t\t\t\t\t\tfloated='right'\r\n\t\t\t\t\t\t\t\t\t\tnegative\r\n\t\t\t\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\t\t\t\tcontent='Delete'\r\n\t\t\t\t\t\t\t\t\t\tdisabled={loading}\r\n\t\t\t\t\t\t\t\t\t/> */}\r\n                                    <Button onClick={() => {if(window.confirm('Delete the Test?')){deleteTest(test.id)};}}  type='submit' content='Delete' disabled={loading} color='red'  ></Button>\r\n\r\n           </Segment>\r\n\r\n       </Segment.Group>\r\n       \r\n    )\r\n}\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport TestListItem from './TestListItem';\r\n\r\nexport default observer(function TestList() {\r\n\r\n    const {testStore} = useStore();\r\n    const {testsByName} = testStore\r\n\r\n    return ( //video 5.7\r\n        <>\r\n            {testsByName.map(test => (\r\n                <TestListItem key={test.id} test={test} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Grid, Header, Menu } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport Add from './Add';\r\nimport TestList from './TestList';\r\n\r\n\r\nexport default observer(function TestDashboard() {\r\n\r\n    const {testStore} = useStore();\r\n    const {loadTests, testRegistry} = testStore;\r\n\r\n    useEffect(() => {\r\n        if (testRegistry.size <= 1) loadTests();\r\n    }, [testRegistry.size, loadTests])\r\n\r\n    if (testStore.loadingInitial) return <LoadingComponent content='Loading app' />\r\n\r\n    return (\r\n        \r\n    //     <Grid>\r\n            \r\n    //         <Grid.Row columns={1}>\r\n    //     <Grid.Column>\r\n    //     <h2 >Tests</h2>\r\n    //     </Grid.Column>\r\n     \r\n    //   </Grid.Row>\r\n    //         <Grid.Column width='13' >\r\n    //             <TestList />\r\n    //         </Grid.Column>\r\n            \r\n    //         <Grid.Column width='5'>\r\n    //         <Menu vertical size='large' style={{ width: '100%' }}>\r\n    //             <Header icon='filter' attached color='teal' content='Filters' />\r\n    //             <Menu.Item content='All Tests in Hospital' />\r\n\r\n    //         </Menu>\r\n    //         </Grid.Column>\r\n    //         <Header />\r\n           \r\n       \r\n    //         <Grid.Column/>\r\n    //         <Grid.Column><Add/></Grid.Column>\r\n        \r\n          \r\n    //     </Grid>\r\n    <Grid>\r\n    <Grid.Column width='10'>\r\n        <TestList />\r\n    </Grid.Column>\r\n    <Grid.Column width='5'>\r\n    <>\r\n            <Menu vertical size='large' style={{ width: '100%' }}>\r\n                <Header icon='lab' attached color='teal' content='Tests' />\r\n                \r\n            </Menu>\r\n            <Header />\r\n           \r\n        </>\r\n      <Button\r\n  as={Link}\r\n  to={`/createTest`}\r\n  color='blue'\r\n   floated='right'\r\n  content='Add'\r\n/>\r\n    </Grid.Column>\r\n  \r\n</Grid>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik,Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { Test } from '../../../app/models/test';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\n\r\n\r\nexport default observer(function TestForm() {\r\n    const history = useHistory();\r\n    const {testStore} = useStore();\r\n    const{createTest, updateTest, loading, loadTest, loadingInitial} = testStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [test, setTest] = useState<Test>({\r\n     id: '',\r\n    emri: '',\r\n    cmimi: 0,\r\n    pershkrimi: ''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        emri: Yup.string().required(),\r\n        cmimi: Yup.string().required(),\r\n        pershkrimi: Yup.string().required(),\r\n\r\n        \r\n  \r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(id) loadTest(id).then(test => setTest(test!))\r\n    },[id, loadTest]);\r\n\r\n\r\n    function handleFormSubmit(test:Test) {\r\n       if(test.id.length === 0){\r\n           let newTest = {\r\n               ...test,\r\n               id: uuid()\r\n           };\r\n           createTest(newTest).then(() => history.push(`/tests`))\r\n       }else{\r\n           updateTest(test).then(() => history.push(`/tests`))\r\n       }\r\n       \r\n    }\r\n\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading Test ...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Test Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema={validationSchema}\r\n             enableReinitialize\r\n             initialValues={test} onSubmit={values => handleFormSubmit(values)}>\r\n            {({handleSubmit, isValid,isSubmitting,dirty})=>(\r\n                     <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>                 \r\n                        <MyTextInput name='emri' placeholder='Emri'/>                        \r\n                        <MyTextArea rows={3} name='pershkrimi' placeholder='Pershkrimi' />\r\n                        <MyTextInput placeholder='Cmimi'  name='cmimi'/>\r\n                     <Button \r\n                     disabled={isSubmitting || !dirty || !isValid}\r\n                     loading={loading} floated='right' positive type='submit' content='Submit' />\r\n                     <Button as={Link} to='/tests' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n                \r\n            </Formik>\r\n           \r\n            \r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\n\r\nimport { Item } from 'semantic-ui-react';\r\n\r\nexport default function Add() {\r\n    return (\r\n        <Item.Image  circular src='/assets/blood/blood2.jpg' /> \r\n               \r\n    )\r\n}","import React from 'react';\r\nimport {  Item, Segment } from 'semantic-ui-react';\r\nimport { BloodType } from '../../../app/models/bloodTypes';\r\n\r\n\r\ninterface Props {\r\n    bloodType: BloodType\r\n}\r\n\r\nexport default function BloodTypeListItem({bloodType}: Props) {\r\n   \r\n  return (\r\n       <Segment.Group>\r\n           \r\n           <Segment>\r\n           \r\n               <Item.Group background-color='red'>\r\n                   <Item>\r\n            \r\n                   <Item.Image src={`/assets/blood/${bloodType.type}.jpg`} />\r\n                       <Item>   <h1>{bloodType.type}</h1></Item>        \r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n         \r\n       </Segment.Group>\r\n    )\r\n}\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport BloodTypeListItem from './BloodTypeListItem';\r\n\r\nexport default observer(function BloodTypeList() {\r\n\r\n    const {bloodTypeStore} = useStore();\r\n    const {bloodByType} = bloodTypeStore\r\n\r\n    return ( //video 5.7\r\n        <>\r\n            {bloodByType.map(bloodByType => (\r\n                <BloodTypeListItem key={bloodByType.type} bloodType={bloodByType} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import React from 'react';\r\n\r\nimport { Item } from 'semantic-ui-react';\r\n\r\nexport default function Image2() {\r\n    return (\r\n        <Item.Image  circular src='/assets/blood/blood.jpg' /> \r\n               \r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport Add from './Add';\r\n\r\nimport BloodTypeList from './BloodTypeList';\r\nimport Image2 from './image2';\r\n\r\nexport default observer(function BloodTypeDashboard() {\r\n\r\n    const {bloodTypeStore} = useStore();\r\n    const {loadBloodTypes, bloodTypeRegistry} = bloodTypeStore;\r\n\r\n    useEffect(() => {\r\n        if (bloodTypeRegistry.size <= 1) loadBloodTypes();\r\n    }, [bloodTypeRegistry.size, loadBloodTypes])\r\n\r\n    if (bloodTypeStore.loadingInitial) return <LoadingComponent content='Loading app' />\r\n\r\n    return (\r\n       \r\n        \r\n        <Grid >\r\n            \r\n            <Grid.Column width='5'>\r\n                <BloodTypeList />\r\n            </Grid.Column>\r\n            <Grid.Column width='5'>\r\n              <Add/><br /><br />\r\n              \r\n              <Image2/>\r\n            </Grid.Column>     \r\n               \r\n        </Grid>\r\n    )\r\n})","import { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Segment } from \"semantic-ui-react\";\r\nimport React from 'react';\r\nimport { EmergencyDriver } from \"../../../app/models/emergencyDriver\";\r\nimport { format } from \"date-fns\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface Props {\r\n    emergencyDriver : EmergencyDriver\r\n}\r\n\r\nexport default function EmergencyDriverListItem({emergencyDriver}: Props){\r\n    const { emergencyDriverStore } = useStore();\r\n    const { deleteEmergencyDriver, loading } = emergencyDriverStore;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src='/assets/emergencyDriverImages/emergencyDrivers.png' />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/emergencyDrivers/${emergencyDriver.Id}`} >\r\n                                {emergencyDriver.Name} Xhastin\r\n                            </Item.Header>\r\n                            <Item.Description>EmergencyDriver in HMS</Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                {/* <Icon name='clock' /> {format(emergencyDriver.Dateofbirth!, 'dd MMM yyyy h:mm aa')} */}\r\n                    <Icon  marker='marker'/>{emergencyDriver.Gender} M\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                Interns/Residents under your supervision\r\n            </Segment>\r\n            <Segment >\r\n                {emergencyDriver.Phone}\r\n                <Icon name=\"phone\" />044569874\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{emergencyDriver.Department}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`#`}\r\n                    color='red'\r\n                    floated='right'\r\n                    content='Delete'\r\n                    onClick={() => deleteEmergencyDriver(emergencyDriver.Id)}\r\n                    type='submit'\r\n                    disabled={loading}\r\n                />\r\n                <Button \r\n                    as={Link}\r\n                    to={`/emergencyDrivers/${emergencyDriver.Id}`}\r\n                    color='teal'\r\n                    floated= 'right'\r\n                    content= 'View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Item, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport EmergencyDriverListItem from './EmergencyDriverListItem';\r\n\r\n\r\nexport default observer(function EmergencyDriverList() {\r\n    const { emergencyDriverStore } = useStore();\r\n    const { emergencyDriversByDate } = emergencyDriverStore;\r\n\r\n    return (\r\n        <Segment>\r\n            <Item.Group divided>\r\n                {emergencyDriversByDate.map(emergencyDriver => (\r\n                    <EmergencyDriverListItem key={emergencyDriver.Id} emergencyDriver={emergencyDriver} />\r\n                ))}\r\n\r\n            </Item.Group>\r\n        </Segment>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\n\r\n\r\nexport default function DoctorFilters() {\r\n    return(\r\n        <>\r\n                <Menu vertical size='large' style={{width: '100%' }} >\r\n            <Header icon='filter' attached color='teal' content='Filters' />\r\n            <Menu.Item content='All Drivers' />\r\n            <Menu.Item content=\"Drivers\" />\r\n            <Menu.Item content=\"Patient\" />\r\n        </Menu>\r\n        <Header />\r\n        <Calendar />\r\n        </>\r\n\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport EmergencyDriverList from './EmergencyDriverList';\r\nimport EmergencyDriverFilters from './EmergencyDriverFilters';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default observer(function EmergencyDriverDashboard(){\r\n    \r\n    const {emergencyDriverStore} =useStore();     \r\n    const {loadEmergencyDrivers, emergencyDriverRegistry} = emergencyDriverStore;  \r\n\r\n        useEffect(() => {\r\n         if (emergencyDriverRegistry.size <= 1) loadEmergencyDrivers();\r\n            }, [emergencyDriverRegistry.size, loadEmergencyDrivers])\r\n\r\n    if(emergencyDriverStore.loadingInitial) return <LoadingComponent content ='Loading app'/>\r\n    return (\r\n        <Grid>\r\n            <Grid.Row columns={2}>\r\n                <Grid.Column>\r\n                    <h2>Surgeries</h2>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Button\r\n                        as={Link}\r\n                        to={`/createEmergencyDrivers`}\r\n                        color='blue'\r\n                        floated='right'\r\n                        content='Add'\r\n                    />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Column width ='10'>\r\n              <EmergencyDriverList />\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <EmergencyDriverFilters />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { EmergencyDriver } from '../../../app/models/emergencyDriver';\r\n\r\nconst emergencyDriverImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst emergencyDriverImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    emergencyDriver: EmergencyDriver\r\n}\r\n\r\nexport default observer (function EmergencyDriverDetailedHeader({emergencyDriver: EmergencyDriver}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/user.png`} fluid style={emergencyDriverImageStyle}/>\r\n                <Segment style={emergencyDriverImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={EmergencyDriver.Name}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(EmergencyDriver.Dateofbirth!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    EmergencyDriver in <strong>HMS</strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button as={Link} to='/emergencyDrivers' color='orange' floated='right'>\r\n                    Cancel\r\n                </Button>\r\n                <Button as={Link} to={`/manageemergencyDriver/${EmergencyDriver.Id}`} color='orange' floated='right'>\r\n                    Manage EmergencyDriver\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { EmergencyDriver } from '../../../app/models/emergencyDriver';\r\n\r\ninterface Props {\r\n    emergencyDriver: EmergencyDriver\r\n}\r\n\r\nexport default observer(function EmergencyDriverDetailedInfo({emergencyDriver}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{emergencyDriver.Department}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n            {format(emergencyDriver.Dateofbirth!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{emergencyDriver.Street_address}, {emergencyDriver.City}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nexport default observer(function EmergencyDriverDetailedSidebar () {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                3 People under your supervision today\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Bob</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Driver</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Driver</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport EmergencyDriverDetailedHeader from './EmergencyDriverDetailedHeader';\r\nimport EmergencyDriverDetailedInfo from './EmergencyDriverDetailedInfo';\r\nimport EmergencyDriverDetailedSidebar from './EmergencyDriverDetailedSidebar';\r\n\r\n\r\n\r\nexport default observer( function EmergencyDriverDetails(){\r\n   const{emergencyDriverStore} = useStore();\r\n   const {selectedEmergencyDriver: emergencyDriver,loadEmergencyDriver, loadingInitial} = emergencyDriverStore;\r\n   const {id} = useParams<{id:string}>();\r\n\r\n   useEffect(() => {\r\n     if (id) loadEmergencyDriver(id);\r\n   }, [id, loadEmergencyDriver]);\r\n\r\n   if(loadingInitial || !emergencyDriver) return <LoadingComponent />;\r\n\r\n    return(\r\n          <Grid>\r\n            <Grid.Column width={10}>\r\n              <EmergencyDriverDetailedHeader emergencyDriver={emergencyDriver} />\r\n              <EmergencyDriverDetailedInfo emergencyDriver={emergencyDriver} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6} >\r\n              <EmergencyDriverDetailedSidebar />\r\n            </Grid.Column>\r\n          </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { cityOptions } from '../../../app/common/options/cityOptions';\r\nimport { countryOptions } from '../../../app/common/options/countryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { EmergencyDriver } from '../../../app/models/emergencyDriver';\r\n\r\n\r\n\r\nexport default observer(function EmergencyDriverForm(){\r\n    const history = useHistory();\r\n    const {emergencyDriverStore} = useStore();\r\n    const {createEmergencyDriver, updateEmergencyDriver, \r\n            loading, loadEmergencyDriver, loadingInitial} = emergencyDriverStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [emergencyDriver, setEmergencyDriver] =useState<EmergencyDriver>({\r\n        Id: '',\r\n        Name: '',\r\n        Surname: '',\r\n        Username: '',\r\n        Password: '',\r\n        Dateofbirth: null,\r\n        Gender: '',\r\n        Street_address: '',\r\n        City: '',\r\n        Country: '',\r\n        Postal_code: '',\r\n        Phone: '',\r\n        Department: '',\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required('The patient name is required'),\r\n        surname: Yup.string().required('The patient surname is required'),\r\n        dateofbirth: Yup.string().required(\"The Date of Birth is required\").nullable(),\r\n        Gender: Yup.string().required(),\r\n        Street_address: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n        country: Yup.string().required(),\r\n        postal_code: Yup.string().required(),\r\n        phone: Yup.string().required(),\r\n        designation: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadEmergencyDriver(id).then(emergencyDriver => setEmergencyDriver(emergencyDriver!))\r\n    }, [id, loadEmergencyDriver]);\r\n\r\n    function handleFormSubmit(emergencyDriver: EmergencyDriver){\r\n       if (emergencyDriver.Id.length === 0 ) {\r\n           let newEmergencyDriver ={\r\n               ...emergencyDriver,\r\n               id:uuid()\r\n           };\r\n           createEmergencyDriver(newEmergencyDriver).then(() => history.push(`/emergencyDrivers/${newEmergencyDriver.id}`))\r\n       }else{\r\n           updateEmergencyDriver(emergencyDriver).then(() => history.push(`/emergencyDrivers/${emergencyDriver.Id}`))\r\n       }\r\n    }\r\n\r\n    function handleInputChange (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        const {name, value} = event.target;\r\n        setEmergencyDriver({...emergencyDriver, [name]:value})\r\n     \r\n    }\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading emergencyDriver...' /> \r\n\r\n    return(\r\n        <Segment clearing>\r\n             <Header content='EmergencyDriver Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema ={validationSchema}\r\n            enableReinitialize \r\n            initialValues={emergencyDriver} \r\n            onSubmit={values => handleFormSubmit(values)} >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <MyTextInput name='Name' placeholder='Name' />\r\n                    <MyTextInput placeholder ='Surname'   name='Surname' />\r\n                    <MyTextInput placeholder ='Username'   name='Username' />\r\n                    <MyTextInput placeholder ='Password'   name='Password' type='password' />\r\n                    <MyDateInput\r\n                        placeholderText ='dateofbirth' \r\n                        name='dateofbirth'\r\n                    />\r\n                    <MyTextInput  placeholder ='Gender'    name='Gender'  />\r\n                    <MyTextInput placeholder ='Street_address' name='Street_address'  />\r\n                    <MySelectInput options={cityOptions} placeholder ='City'    name='City'  />\r\n                    <MySelectInput options={countryOptions} placeholder ='Country'  name='Country'  />\r\n                    <MyTextInput placeholder ='Postal_code' name='Postal_code'  />\r\n                    <MyTextInput placeholder ='Phone'   name='Phone' />\r\n                    <MyTextInput placeholder ='Department'   name='Department' />\r\n                    <Button \r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={loading} floated = 'right'\r\n                        positive type='submit' content='Submit' />\r\n                    <Button as={Link} to='/emergencyDrivers' floated = 'right'  type='button' content='Cancel' />  \r\n                </Form>                 \r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Segment } from 'semantic-ui-react';\r\nimport { Department } from '../../../app/models/department';\r\nimport { Medicine } from '../../../app/models/medicine';\r\n// import DepartmentListItemAttendee from './DepartmentListItemAttendee';\r\n\r\ninterface Props {\r\n    medicine: Medicine;\r\n}\r\n\r\nexport default function MedicineListItem({medicine}: Props) {\r\n\r\n    return (\r\n       <Segment.Group>\r\n           <Segment>\r\n               <Item.Group>\r\n                   <Item>\r\n                       <Item.Image size='tiny' src={`/assets/departmentImages/${medicine.medicineName}.jpg`} />\r\n                       <Item.Content>\r\n                            <Item.Header as={Link} to={`/medicines/${medicine.id}`}>\r\n                                {medicine.medicineName}\r\n                            </Item.Header>\r\n                            <Item.Description>{medicine.medicineDescription}</Item.Description>\r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n           <Segment>\r\n                <span>\r\n                    <Icon name='marker' /> {medicine.medicineDepartment}\r\n                </span>\r\n            </Segment>\r\n           <Segment>\r\n                <span>\r\n                    <Icon name='dollar' /> {medicine.medicinePrice}€\r\n                </span>\r\n            </Segment>\r\n           {/* <Segment secondary>\r\n               <DepartmentListItemAttendee departmentAttendees={department.departmentAttendees!} />\r\n           </Segment> */}\r\n           <Segment clearing>\r\n               <Button \r\n                    as={Link}\r\n                    to={`/medicines/${medicine.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n               />\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport MedicineListItem from './MedicineListItem';\r\n\r\nexport default observer(function MedicineList() {\r\n\r\n    const {medicineStore} = useStore();\r\n    const {medicinesByName} = medicineStore\r\n\r\n    return ( //video 5.7\r\n        <>\r\n            {medicinesByName.map(medicine => (\r\n                <MedicineListItem key={medicine.id} medicine={medicine} />\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport MedicineFilters from './MedicineFilters';\r\nimport MedicineList from './MedicineList';\r\n\r\nexport default observer(function MedicineDashboard() {\r\n\r\n    const {medicineStore} = useStore();\r\n    const {loadMedicines, medicineRegistry} = medicineStore;\r\n\r\n    useEffect(() => {\r\n        if (medicineRegistry.size <= 1) loadMedicines();\r\n    }, [medicineRegistry.size, loadMedicines])\r\n\r\n    if (medicineStore.loadingInitial) return <LoadingComponent content='Loading appointments...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='16'>\r\n                <MedicineList />\r\n            </Grid.Column>\r\n            {/* <Grid.Column width='6'>\r\n                <MedicineFilters />\r\n            </Grid.Column> */}\r\n        </Grid>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport { Medicine } from '../../../app/models/medicine';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst medicineImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst medicineImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '2%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    medicine: Medicine\r\n}\r\n\r\nexport default observer (function MedicineDetailedHeader({medicine}: Props) {\r\n    const {medicineStore: {loading}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/departmentImages/${medicine.medicineName}.jpg`} fluid style={medicineImageStyle}/>\r\n                <Segment style={medicineImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={medicine.medicineName}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p style={{marginRight: 10}}>\r\n                                    {medicine.medicineDescription}\r\n                                </p>\r\n                                <p style={{marginRight: 10}}>\r\n                                    {medicine.medicineDepartment}\r\n                                </p>\r\n                                <p style={{marginRight: 10}}>\r\n                                    {medicine.medicinePrice}€\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button as={Link} to='/medicines' color='orange' floated='right'>\r\n                    Cancel\r\n                </Button>\r\n                <Button as={Link} to={`/managemedicine/${medicine.id}`} color='orange' floated='right'>\r\n                    Manage Medicine\r\n                </Button>\r\n            </Segment>\r\n            {/* <Segment clearing attached='bottom'>\r\n                {department.isHost ? (\r\n                    <Button as={Link} to={`/managedepartment/${department.id}`} color='orange' floated='right'>\r\n                        Manage Event\r\n                    </Button>\r\n                ) : department.isDoctor ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment> */}\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Medicine} from \"../../../app/models/medicine\";\r\n\r\ninterface Props {\r\n    medicine: Medicine\r\n}\r\n\r\nexport default observer(function MedicineDetailedInfo({medicine}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{medicine.medicineDescription}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{medicine.medicineDepartment}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='dollar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{medicine.medicineName}, {medicine.medicinePrice}€</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport DepartmentDetailedChat from './DepartmentDetailedChat';\r\nimport MedicineDetailedHeader from './MedicineDetailedHeader';\r\nimport MedicineDetailedInfo from './MedicineDetailedInfo';\r\nimport MedicineDetailedSidebar from './MedicineDetailedSidebar';\r\n\r\nexport default observer(function MedicineDetails() {\r\n    const {medicineStore} = useStore();\r\n    const {selectedMedicine: medicine, loadMedicine, loadingInitial, clearSelectedMedicine} = medicineStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadMedicine(id);\r\n        return () => clearSelectedMedicine();\r\n    }, [id, loadMedicine, clearSelectedMedicine]);\r\n\r\n    if (loadingInitial || !medicine) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <MedicineDetailedHeader medicine={medicine} />\r\n                <MedicineDetailedInfo medicine={medicine} />\r\n                {/* <DepartmentDetailedChat departmentId={department.id}/> */}\r\n            </Grid.Column>\r\n            {/* <Grid.Column width={6}>\r\n                <DepartmentDetailedSidebar department={department} />\r\n            </Grid.Column> */}\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport { Medicine } from '../../../app/models/medicine';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\n\r\nexport default observer(function MedicineForm() {\r\n    const history = useHistory();\r\n    const { medicineStore, departmentStore } = useStore();\r\n    const { createMedicine, updateMedicine, loadMedicine, loadingInitial} = medicineStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const { departmentsByName, loadDepartments } = departmentStore;\r\n    // let departments=[...departmentRegistry.values()];\r\n\r\n    const options = new Array();\r\n\r\n    const departments = departmentStore.departmentsByName;\r\n    {\r\n        departments.map(dep => (\r\n            options.push({ \"key\": dep.departmentName, \"value\": dep.departmentName, \"text\": dep.departmentName })\r\n        ))\r\n    }\r\n\r\n    const [medicine, setMedicine] = useState<Medicine>({ //\r\n        id: '',\r\n        medicineName: '',\r\n        medicineDescription: '',\r\n        medicineDepartment: '',\r\n        medicinePrice: ''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        medicineName: Yup.string().required('The medicine name and date is required'),\r\n        medicineDescription: Yup.string().required('The medicine description is required'),\r\n        medicineDepartment: Yup.string().required('The medicine department is required'),\r\n        medicinePrice: Yup.string().required('The medicine price is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadMedicine(id).then(medicine => setMedicine(medicine!))\r\n        loadDepartments();\r\n    }, [id, loadMedicine, loadDepartments]);\r\n\r\n    function handleFormSubmit(medicine: Medicine) {\r\n        if (!medicine.id) {\r\n            let newMedicine = {\r\n                ...medicine,\r\n                id: uuid()\r\n            };\r\n            createMedicine(newMedicine).then(() => history.push(`/medicines/${newMedicine.id}`))\r\n        } else {\r\n            updateMedicine(medicine).then(() => history.push(`/medicines/${medicine.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading appointments...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Appointment Details' sub color='teal' />\r\n            <Formik \r\n            validationSchema={validationSchema}\r\n            enableReinitialize \r\n            initialValues={medicine} \r\n            onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='medicineName' placeholder='Name' />\r\n                        <MyTextArea rows={3} name='medicineDescription' placeholder='Description' />\r\n                        {/* <MyTextInput name='medicineDepartment' placeholder='Department' /> */}\r\n                        {/* <Field as=\"select\" name=\"medicineDepartment\">\r\n                        <option value=\"\" disabled selected hidden style={{color: \"gray\"}}>Department</option>\r\n                         {departments.map(dep=>\r\n                            <option key={dep.departmentName} value={dep.departmentName}>{dep.departmentName}</option>\r\n                            )};\r\n                        </Field> */}\r\n                        <MySelectInput name='medicineDepartment' placeholder='Department' options={options} ></MySelectInput>\r\n                        <MyTextInput name='medicinePrice' placeholder='Price' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive type='submit' \r\n                            content='Submit' />\r\n                        <Button as={Link} to='/medicines' floated='right' type='submit' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport DepartmentDashboard from '../../features/departments/dashboard/DepartmentDashboard';\r\nimport DepartmentDetails from '../../features/departments/details/DepartmentDetails';\r\nimport DepartmentForm from '../../features/departments/form/DepartmentForm';\r\nimport ReceptionistDashboard from '../../features/receptionists/dashboard/ReceptionistDashboard';\r\nimport ReceptionistDetails from '../../features/receptionists/details/ReceptionistDetails';\r\nimport ReceptionistForm from '../../features/receptionists/form/ReceptionistForm';\r\nimport NurseDashboard from '../../features/nurses/dashboard/NurseDashboard';\r\nimport NurseDetails from '../../features/nurses/details/NurseDetails';\r\nimport NurseForm from '../../features/nurses/form/NurseForm';\r\nimport FarmacistDashboard from '../../features/farmacist/dashboard/FarmacistDashboard';\r\nimport FarmacistDetails from '../../features/farmacist/details/FarmacistDetails';\r\nimport FarmacistForm from '../../features/farmacist/form/FarmacistForm';\r\nimport PatientDashboard from '../../features/patients/dashboard/PatientDashboard';\r\nimport PatientDetails from '../../features/patients/details/PatientDetails';\r\nimport PatientForm from '../../features/patients/form/PatientForm';\r\nimport CityDashboard from '../../features/cities/dashboard/CityDashboard';\r\nimport CityDetails from '../../features/cities/details/CityDetails';\r\nimport CityForm from '../../features/cities/form/CityForm';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport LoginForm from '../../features/users/LoginForm';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport TherapyForm from '../../features/therapies/form/TherapyForm';\r\nimport TherapyDetails from '../../features/therapies/details/TherapyDetails';\r\nimport TherapyDashboard from '../../features/therapies/dashboard/TherapyDashboard';\r\nimport DoctorDashboard from '../../features/doctors/dashboard/DoctorDashboard';\r\nimport DoctorDetails from '../../features/doctors/details/DoctorDetails';\r\nimport DoctorForm from '../../features/doctors/form/DoctorForm';\r\nimport TechEmployeeDashboard from '../../features/techEmployees/dashboard/TechEmployeeDashboard';\r\nimport TechEmployeeForm from '../../features/techEmployees/form/techEmployeeForm';\r\n\r\nimport SurgeryDashboard from '../../features/surgeries/dashboard/SurgeryDashboard';\r\nimport SurgeryDetails from '../../features/surgeries/details/SurgeryDetails';\r\nimport SurgeryForm from '../../features/surgeries/form/SurgeryForm';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport CountryDashboard from '../../features/countries/dashboard/CountryDashboard';\r\nimport CountryDetails from '../../features/countries/details/CountryDetails';\r\nimport CountryForm from '../../features/countries/form/CountryForm';\r\nimport TerminDashboard from '../../features/termins/dashboard/TerminDashboard';\r\nimport TerminDetails from '../../features/termins/details/TerminDetails';\r\nimport TerminForm from '../../features/termins/form/TerminForm';\r\nimport RoomDashboard from '../../features/rooms/dashboard/RoomDashboard';\r\nimport RoomDetails from '../../features/rooms/details/RoomDetails';\r\nimport RoomForm from '../../features/rooms/form/RoomForm';\r\n\r\nimport TestDashboard from '../../features/tests/dashboard/TestDashboard';\r\nimport TestForm from '../../features/tests/form/TestForm';\r\nimport BloodTypeDashboard from '../../features/bloodtypes/dashboard/BloodTypeDashboard';\r\nimport EmergencyDriverDashboard from '../../features/emergencyDrivers/dashboard/EmergencyDriverDashboard';\r\nimport EmergencyDriverDetails from '../../features/emergencyDrivers/details/EmergencyDriverDetails';\r\nimport EmergencyDriverForm from '../../features/emergencyDrivers/form/EmergencyDriverForm';\r\nimport MedicineDashboard from '../../features/medicines/dashboard/MedicineDashboard';\r\nimport MedicineDetails from '../../features/medicines/details/MedicineDetails';\r\nimport MedicineForm from '../../features/medicines/form/MedicineForm';\r\n\r\nfunction App() {\r\n  const location = useLocation(); \r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer position=\"bottom-right\" hideProgressBar/>\r\n    <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n              <Route exact path='/departments' component={DepartmentDashboard} />\r\n              <Route path='/departments/:id' component={DepartmentDetails} />\r\n              <Route path={['/createDepartment', '/managedepartment/:id']} component={DepartmentForm} />\r\n\r\n              <Route exact path='/termins' component={TerminDashboard} />\r\n              <Route path='/termins/:id' component={TerminDetails} />\r\n              <Route path={['/createTermin', '/managetermin/:id']} component={TerminForm} />\r\n\r\n              <Route exact path='/medicines' component={MedicineDashboard} />\r\n              <Route path='/medicines/:id' component={MedicineDetails} />\r\n              <Route path={['/createMedicine', '/managemedicine/:id']} component={MedicineForm} />\r\n\r\n              <Route exact path='/receptionists' component={ReceptionistDashboard} />\r\n              <Route path='/receptionists/:id' component={ReceptionistDetails} />\r\n              <Route key={location.key} path={['/createReceptionist', '/managereceptionist/:id']} component={ReceptionistForm} />\r\n\r\n              <Route exact path='/nurses' component={NurseDashboard} />\r\n              <Route path='/nurses/:id' component={NurseDetails} />\r\n              <Route key={location.key} path={['/createNurse', '/managenurse/:id']} component={NurseForm} />\r\n              \r\n              <Route exact path='/farmacists' component={FarmacistDashboard} />\r\n              <Route path='/farmacists/:id' component={FarmacistDetails} />\r\n              <Route key={location.key} path={['/createFarmacist', '/managefarmacist/:id']} component={FarmacistForm} />\r\n\r\n              <Route exact path='/techEmployees' component={TechEmployeeDashboard} />\r\n              {/* <Route path='/farmacists/:id' component={FarmacistDetails} /> */}\r\n              <Route key={location.key} path={['/createTechEmployee', '/managetechEmployee/:id']} component={TechEmployeeForm} />\r\n\r\n              <Route exact path='/patients' component={PatientDashboard} />\r\n              <Route path='/patients/:id' component={PatientDetails} />\r\n              <Route key={location.key} path={['/createPatient', '/managepatient/:id']} component={PatientForm} />\r\n\r\n              <Route exact path='/cities' component={CityDashboard} />\r\n              <Route path='/cities/:id' component={CityDetails} />\r\n              <Route key={location.key} path={['/createCity', '/managecity/:id']} component={CityForm} />\r\n\r\n              <Route exact path='/therapies' component={TherapyDashboard} />\r\n              <Route path='/therapies/:id' component={TherapyDetails} />\r\n              <Route key={location.key} path={['/createTherapy', '/managetherapy/:id']} component={TherapyForm} />\r\n\r\n              <Route exact path='/doctors' component={DoctorDashboard} />\r\n              <Route path='/doctors/:id' component={DoctorDetails} />\r\n              <Route key={location.key} path={['/createDoctor', '/managedoctor/:id']} component={DoctorForm} />\r\n\r\n              <Route exact path='/surgeries' component={SurgeryDashboard} />\r\n              <Route path='/surgeries/:id' component={SurgeryDetails} />\r\n              <Route key={location.key} path={['/createSurgery', '/managesurgery/:id']} component={SurgeryForm} />\r\n\r\n              <Route exact path='/rooms' component={RoomDashboard} />\r\n              <Route path='/rooms/:id' component={RoomDetails} />\r\n              <Route key={location.key} path={['/createRoom', '/manageroom/:id']} component={RoomForm} />\r\n\r\n              <Route exact path='/countries' component={CountryDashboard} />\r\n              <Route path='/countries/:id' component={CountryDetails} />\r\n              <Route key={location.key} path={['/createCountry', '/managecountry/:id']} component={CountryForm} />\r\n\r\n              <Route exact path='/emergencyDrivers' component={EmergencyDriverDashboard} />\r\n              <Route path='/emergencyDrivers/:id' component={EmergencyDriverDetails} />\r\n              <Route key={location.key} path={['/createEmergencyDriver', '/manageemergencyDriver/:id']} component={EmergencyDriverForm} />\r\n              \r\n              <Route exact path='/tests' component={TestDashboard} />\r\n              {/* <Route path='/farmacists/:id' component={FarmacistDetails} /> */}\r\n              <Route key={location.key} path={['/createTest', '/managetest/:id']} component={TestForm} />\r\n\r\n              <Route exact path='/bloodTypes' component={BloodTypeDashboard} />\r\n\r\n              <Route path='/profiles/:username' component={ProfilePage}/>\r\n              <Route path='/errors' component={TestErrors}/>\r\n              <Route path='/server-error' component={ServerError}/>\r\n              <Route path='/login' component={LoginForm}/>\r\n              <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport App from './app/layout/App';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/styles.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}